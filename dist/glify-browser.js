!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n(require("leaflet"));else if("function"==typeof define&&define.amd)define(["leaflet"],n);else{var r="object"==typeof exports?n(require("leaflet")):n(t.L);for(var e in r)("object"==typeof exports?exports:t)[e]=r[e]}}(window,(function(t){return function(t){var n={};function r(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)r.d(e,i,function(n){return t[n]}.bind(null,i));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=10)}([function(n,r){n.exports=t},function(t,n,r){"use strict";function e(t,n,r){r=r||2;var e,a,s,c,f,v,d,g=n&&n.length,y=g?n[0]*r:t.length,_=i(t,0,y,r,!0),m=[];if(!_||_.next===_.prev)return m;if(g&&(_=function(t,n,r,e){var u,a,s,c,f,v=[];for(u=0,a=n.length;u<a;u++)s=n[u]*e,c=u<a-1?n[u+1]*e:t.length,(f=i(t,s,c,e,!1))===f.next&&(f.steiner=!0),v.push(p(f));for(v.sort(l),u=0;u<v.length;u++)h(v[u],r),r=o(r,r.next);return r}(t,n,_,r)),t.length>80*r){e=s=t[0],a=c=t[1];for(var x=r;x<y;x+=r)(f=t[x])<e&&(e=f),(v=t[x+1])<a&&(a=v),f>s&&(s=f),v>c&&(c=v);d=0!==(d=Math.max(s-e,c-a))?1/d:0}return u(_,m,r,e,a,d),m}function i(t,n,r,e,i){var o,u;if(i===L(t,n,r,e)>0)for(o=n;o<r;o+=e)u=b(o,t[o],t[o+1],u);else for(o=r-e;o>=n;o-=e)u=b(o,t[o],t[o+1],u);return u&&_(u,u.next)&&(S(u),u=u.next),u}function o(t,n){if(!t)return t;n||(n=t);var r,e=t;do{if(r=!1,e.steiner||!_(e,e.next)&&0!==y(e.prev,e,e.next))e=e.next;else{if(S(e),(e=n=e.prev)===e.next)break;r=!0}}while(r||e!==n);return n}function u(t,n,r,e,i,l,h){if(t){!h&&l&&function(t,n,r,e){var i=t;do{null===i.z&&(i.z=v(i.x,i.y,n,r,e)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==t);i.prevZ.nextZ=null,i.prevZ=null,function(t){var n,r,e,i,o,u,a,s,c=1;do{for(r=t,t=null,o=null,u=0;r;){for(u++,e=r,a=0,n=0;n<c&&(a++,e=e.nextZ);n++);for(s=c;a>0||s>0&&e;)0!==a&&(0===s||!e||r.z<=e.z)?(i=r,r=r.nextZ,a--):(i=e,e=e.nextZ,s--),o?o.nextZ=i:t=i,i.prevZ=o,o=i;r=e}o.nextZ=null,c*=2}while(u>1)}(i)}(t,e,i,l);for(var p,d,g=t;t.prev!==t.next;)if(p=t.prev,d=t.next,l?s(t,e,i,l):a(t))n.push(p.i/r),n.push(t.i/r),n.push(d.i/r),S(t),t=d.next,g=d.next;else if((t=d)===g){h?1===h?u(t=c(t,n,r),n,r,e,i,l,2):2===h&&f(t,n,r,e,i,l):u(o(t),n,r,e,i,l,1);break}}}function a(t){var n=t.prev,r=t,e=t.next;if(y(n,r,e)>=0)return!1;for(var i=t.next.next;i!==t.prev;){if(d(n.x,n.y,r.x,r.y,e.x,e.y,i.x,i.y)&&y(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function s(t,n,r,e){var i=t.prev,o=t,u=t.next;if(y(i,o,u)>=0)return!1;for(var a=i.x<o.x?i.x<u.x?i.x:u.x:o.x<u.x?o.x:u.x,s=i.y<o.y?i.y<u.y?i.y:u.y:o.y<u.y?o.y:u.y,c=i.x>o.x?i.x>u.x?i.x:u.x:o.x>u.x?o.x:u.x,f=i.y>o.y?i.y>u.y?i.y:u.y:o.y>u.y?o.y:u.y,l=v(a,s,n,r,e),h=v(c,f,n,r,e),p=t.prevZ,g=t.nextZ;p&&p.z>=l&&g&&g.z<=h;){if(p!==t.prev&&p!==t.next&&d(i.x,i.y,o.x,o.y,u.x,u.y,p.x,p.y)&&y(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,g!==t.prev&&g!==t.next&&d(i.x,i.y,o.x,o.y,u.x,u.y,g.x,g.y)&&y(g.prev,g,g.next)>=0)return!1;g=g.nextZ}for(;p&&p.z>=l;){if(p!==t.prev&&p!==t.next&&d(i.x,i.y,o.x,o.y,u.x,u.y,p.x,p.y)&&y(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;g&&g.z<=h;){if(g!==t.prev&&g!==t.next&&d(i.x,i.y,o.x,o.y,u.x,u.y,g.x,g.y)&&y(g.prev,g,g.next)>=0)return!1;g=g.nextZ}return!0}function c(t,n,r){var e=t;do{var i=e.prev,o=e.next.next;!_(i,o)&&m(i,e,e.next,o)&&x(i,o)&&x(o,i)&&(n.push(i.i/r),n.push(e.i/r),n.push(o.i/r),S(e),S(e.next),e=t=o),e=e.next}while(e!==t);return e}function f(t,n,r,e,i,a){var s=t;do{for(var c=s.next.next;c!==s.prev;){if(s.i!==c.i&&g(s,c)){var f=w(s,c);return s=o(s,s.next),f=o(f,f.next),u(s,n,r,e,i,a),void u(f,n,r,e,i,a)}c=c.next}s=s.next}while(s!==t)}function l(t,n){return t.x-n.x}function h(t,n){if(n=function(t,n){var r,e=n,i=t.x,o=t.y,u=-1/0;do{if(o<=e.y&&o>=e.next.y&&e.next.y!==e.y){var a=e.x+(o-e.y)*(e.next.x-e.x)/(e.next.y-e.y);if(a<=i&&a>u){if(u=a,a===i){if(o===e.y)return e;if(o===e.next.y)return e.next}r=e.x<e.next.x?e:e.next}}e=e.next}while(e!==n);if(!r)return null;if(i===u)return r.prev;var s,c=r,f=r.x,l=r.y,h=1/0;e=r.next;for(;e!==c;)i>=e.x&&e.x>=f&&i!==e.x&&d(o<l?i:u,o,f,l,o<l?u:i,o,e.x,e.y)&&((s=Math.abs(o-e.y)/(i-e.x))<h||s===h&&e.x>r.x)&&x(e,t)&&(r=e,h=s),e=e.next;return r}(t,n)){var r=w(n,t);o(r,r.next)}}function v(t,n,r,e,i){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-r)*i)|t<<8))|t<<4))|t<<2))|t<<1))|(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=32767*(n-e)*i)|n<<8))|n<<4))|n<<2))|n<<1))<<1}function p(t){var n=t,r=t;do{(n.x<r.x||n.x===r.x&&n.y<r.y)&&(r=n),n=n.next}while(n!==t);return r}function d(t,n,r,e,i,o,u,a){return(i-u)*(n-a)-(t-u)*(o-a)>=0&&(t-u)*(e-a)-(r-u)*(n-a)>=0&&(r-u)*(o-a)-(i-u)*(e-a)>=0}function g(t,n){return t.next.i!==n.i&&t.prev.i!==n.i&&!function(t,n){var r=t;do{if(r.i!==t.i&&r.next.i!==t.i&&r.i!==n.i&&r.next.i!==n.i&&m(r,r.next,t,n))return!0;r=r.next}while(r!==t);return!1}(t,n)&&x(t,n)&&x(n,t)&&function(t,n){var r=t,e=!1,i=(t.x+n.x)/2,o=(t.y+n.y)/2;do{r.y>o!=r.next.y>o&&r.next.y!==r.y&&i<(r.next.x-r.x)*(o-r.y)/(r.next.y-r.y)+r.x&&(e=!e),r=r.next}while(r!==t);return e}(t,n)}function y(t,n,r){return(n.y-t.y)*(r.x-n.x)-(n.x-t.x)*(r.y-n.y)}function _(t,n){return t.x===n.x&&t.y===n.y}function m(t,n,r,e){return!!(_(t,n)&&_(r,e)||_(t,e)&&_(r,n))||y(t,n,r)>0!=y(t,n,e)>0&&y(r,e,t)>0!=y(r,e,n)>0}function x(t,n){return y(t.prev,t,t.next)<0?y(t,n,t.next)>=0&&y(t,t.prev,n)>=0:y(t,n,t.prev)<0||y(t,t.next,n)<0}function w(t,n){var r=new A(t.i,t.x,t.y),e=new A(n.i,n.x,n.y),i=t.next,o=n.prev;return t.next=n,n.prev=t,r.next=i,i.prev=r,e.next=r,r.prev=e,o.next=e,e.prev=o,e}function b(t,n,r,e){var i=new A(t,n,r);return e?(i.next=e.next,i.prev=e,e.next.prev=i,e.next=i):(i.prev=i,i.next=i),i}function S(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function A(t,n,r){this.i=t,this.x=n,this.y=r,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function L(t,n,r,e){for(var i=0,o=n,u=r-e;o<r;o+=e)i+=(t[u]-t[o])*(t[o+1]+t[u+1]),u=o;return i}t.exports=e,t.exports.default=e,e.deviation=function(t,n,r,e){var i=n&&n.length,o=i?n[0]*r:t.length,u=Math.abs(L(t,0,o,r));if(i)for(var a=0,s=n.length;a<s;a++){var c=n[a]*r,f=a<s-1?n[a+1]*r:t.length;u-=Math.abs(L(t,c,f,r))}var l=0;for(a=0;a<e.length;a+=3){var h=e[a]*r,v=e[a+1]*r,p=e[a+2]*r;l+=Math.abs((t[h]-t[p])*(t[v+1]-t[h+1])-(t[h]-t[v])*(t[p+1]-t[h+1]))}return 0===u&&0===l?0:Math.abs((l-u)/u)},e.flatten=function(t){for(var n=t[0][0].length,r={vertices:[],holes:[],dimensions:n},e=0,i=0;i<t.length;i++){for(var o=0;o<t[i].length;o++)for(var u=0;u<n;u++)r.vertices.push(t[i][o][u]);i>0&&(e+=t[i-1].length,r.holes.push(e))}return r}},function(t,n,r){"use strict";var e=r(3),i=r(5),o=r(6),u=r(7);function a(t){void 0!==t&&this.loadFeatureCollection(t)}function s(t,n){var r=n.geometry.coordinates[0];if(i(t,r)){for(var e=1;e<n.geometry.coordinates.length;e++)if(i(t,n.geometry.coordinates[e]))return!1;return!0}return!1}a.prototype.searchForOnePolygon=function(t,n){var r=this.rtree.search({minX:t,minY:n,maxX:t,maxY:n}),e=[t,n],i=r.map((function(t,n){return this.polygons[r[n].polyId]}),this);return u.find(i,(function(t){return s(e,t)}))},a.prototype.searchForMultiplePolygons=function(t,n,r){-1===r&&(r=Number.MAX_SAFE_INTEGER);var e=[t,n],i=this.rtree.search({minX:t,minY:n,maxX:t,maxY:n}),o=i.map((function(t,n){return this.polygons[i[n].polyId]}),this),u=0;return{type:"FeatureCollection",features:o=o.filter((function(t){return!(u>=r)&&(!!s(e,t)&&(u++,!0))}))}},a.prototype.search=function(t,n,r){return void 0===r?this.searchForOnePolygon(t,n):this.searchForMultiplePolygons(t,n,r)},a.prototype.loadFeatureCollection=function(t){var n=[],r=[],i=0;function u(t){r.push(t);var e=o.getBoundingBox(t.geometry.coordinates[0]);e.polyId=i++,n.push(e)}t.features.forEach((function(t){if(t.geometry&&void 0!==t.geometry.coordinates[0]&&t.geometry.coordinates[0].length>0)switch(t.geometry.type){case"Polygon":u(t);break;case"MultiPolygon":for(var n=t.geometry.coordinates,r=0;r<n.length;r++){u({type:"Feature",properties:t.properties,geometry:{type:"Polygon",coordinates:n[r]}})}}})),this.rtree=(new e).load(n),this.polygons=r},t.exports=a},function(t,n,r){"use strict";t.exports=i,t.exports.default=i;var e=r(4);function i(t,n){if(!(this instanceof i))return new i(t,n);this._maxEntries=Math.max(4,t||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),n&&this._initFormat(n),this.clear()}function o(t,n,r){if(!r)return n.indexOf(t);for(var e=0;e<n.length;e++)if(r(t,n[e]))return e;return-1}function u(t,n){a(t,0,t.children.length,n,t)}function a(t,n,r,e,i){i||(i=d(null)),i.minX=1/0,i.minY=1/0,i.maxX=-1/0,i.maxY=-1/0;for(var o,u=n;u<r;u++)o=t.children[u],s(i,t.leaf?e(o):o);return i}function s(t,n){return t.minX=Math.min(t.minX,n.minX),t.minY=Math.min(t.minY,n.minY),t.maxX=Math.max(t.maxX,n.maxX),t.maxY=Math.max(t.maxY,n.maxY),t}function c(t,n){return t.minX-n.minX}function f(t,n){return t.minY-n.minY}function l(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function h(t){return t.maxX-t.minX+(t.maxY-t.minY)}function v(t,n){return t.minX<=n.minX&&t.minY<=n.minY&&n.maxX<=t.maxX&&n.maxY<=t.maxY}function p(t,n){return n.minX<=t.maxX&&n.minY<=t.maxY&&n.maxX>=t.minX&&n.maxY>=t.minY}function d(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function g(t,n,r,i,o){for(var u,a=[n,r];a.length;)(r=a.pop())-(n=a.pop())<=i||(u=n+Math.ceil((r-n)/i/2)*i,e(t,u,n,r,o),a.push(n,u,u,r))}i.prototype={all:function(){return this._all(this.data,[])},search:function(t){var n=this.data,r=[],e=this.toBBox;if(!p(t,n))return r;for(var i,o,u,a,s=[];n;){for(i=0,o=n.children.length;i<o;i++)u=n.children[i],p(t,a=n.leaf?e(u):u)&&(n.leaf?r.push(u):v(t,a)?this._all(u,r):s.push(u));n=s.pop()}return r},collides:function(t){var n=this.data,r=this.toBBox;if(!p(t,n))return!1;for(var e,i,o,u,a=[];n;){for(e=0,i=n.children.length;e<i;e++)if(o=n.children[e],p(t,u=n.leaf?r(o):o)){if(n.leaf||v(t,u))return!0;a.push(o)}n=a.pop()}return!1},load:function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var n=0,r=t.length;n<r;n++)this.insert(t[n]);return this}var e=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===e.height)this._splitRoot(this.data,e);else{if(this.data.height<e.height){var i=this.data;this.data=e,e=i}this._insert(e,this.data.height-e.height-1,!0)}else this.data=e;return this},insert:function(t){return t&&this._insert(t,this.data.height-1),this},clear:function(){return this.data=d([]),this},remove:function(t,n){if(!t)return this;for(var r,e,i,u,a=this.data,s=this.toBBox(t),c=[],f=[];a||c.length;){if(a||(a=c.pop(),e=c[c.length-1],r=f.pop(),u=!0),a.leaf&&-1!==(i=o(t,a.children,n)))return a.children.splice(i,1),c.push(a),this._condense(c),this;u||a.leaf||!v(a,s)?e?(r++,a=e.children[r],u=!1):a=null:(c.push(a),f.push(r),r=0,e=a,a=a.children[0])}return this},toBBox:function(t){return t},compareMinX:c,compareMinY:f,toJSON:function(){return this.data},fromJSON:function(t){return this.data=t,this},_all:function(t,n){for(var r=[];t;)t.leaf?n.push.apply(n,t.children):r.push.apply(r,t.children),t=r.pop();return n},_build:function(t,n,r,e){var i,o=r-n+1,a=this._maxEntries;if(o<=a)return u(i=d(t.slice(n,r+1)),this.toBBox),i;e||(e=Math.ceil(Math.log(o)/Math.log(a)),a=Math.ceil(o/Math.pow(a,e-1))),(i=d([])).leaf=!1,i.height=e;var s,c,f,l,h=Math.ceil(o/a),v=h*Math.ceil(Math.sqrt(a));for(g(t,n,r,v,this.compareMinX),s=n;s<=r;s+=v)for(g(t,s,f=Math.min(s+v-1,r),h,this.compareMinY),c=s;c<=f;c+=h)l=Math.min(c+h-1,f),i.children.push(this._build(t,c,l,e-1));return u(i,this.toBBox),i},_chooseSubtree:function(t,n,r,e){for(var i,o,u,a,s,c,f,h,v,p;e.push(n),!n.leaf&&e.length-1!==r;){for(f=h=1/0,i=0,o=n.children.length;i<o;i++)s=l(u=n.children[i]),v=t,p=u,(c=(Math.max(p.maxX,v.maxX)-Math.min(p.minX,v.minX))*(Math.max(p.maxY,v.maxY)-Math.min(p.minY,v.minY))-s)<h?(h=c,f=s<f?s:f,a=u):c===h&&s<f&&(f=s,a=u);n=a||n.children[0]}return n},_insert:function(t,n,r){var e=this.toBBox,i=r?t:e(t),o=[],u=this._chooseSubtree(i,this.data,n,o);for(u.children.push(t),s(u,i);n>=0&&o[n].children.length>this._maxEntries;)this._split(o,n),n--;this._adjustParentBBoxes(i,o,n)},_split:function(t,n){var r=t[n],e=r.children.length,i=this._minEntries;this._chooseSplitAxis(r,i,e);var o=this._chooseSplitIndex(r,i,e),a=d(r.children.splice(o,r.children.length-o));a.height=r.height,a.leaf=r.leaf,u(r,this.toBBox),u(a,this.toBBox),n?t[n-1].children.push(a):this._splitRoot(r,a)},_splitRoot:function(t,n){this.data=d([t,n]),this.data.height=t.height+1,this.data.leaf=!1,u(this.data,this.toBBox)},_chooseSplitIndex:function(t,n,r){var e,i,o,u,s,c,f,h,v,p,d,g,y,_;for(c=f=1/0,e=n;e<=r-n;e++)i=a(t,0,e,this.toBBox),o=a(t,e,r,this.toBBox),v=i,p=o,d=void 0,g=void 0,y=void 0,_=void 0,d=Math.max(v.minX,p.minX),g=Math.max(v.minY,p.minY),y=Math.min(v.maxX,p.maxX),_=Math.min(v.maxY,p.maxY),u=Math.max(0,y-d)*Math.max(0,_-g),s=l(i)+l(o),u<c?(c=u,h=e,f=s<f?s:f):u===c&&s<f&&(f=s,h=e);return h},_chooseSplitAxis:function(t,n,r){var e=t.leaf?this.compareMinX:c,i=t.leaf?this.compareMinY:f;this._allDistMargin(t,n,r,e)<this._allDistMargin(t,n,r,i)&&t.children.sort(e)},_allDistMargin:function(t,n,r,e){t.children.sort(e);var i,o,u=this.toBBox,c=a(t,0,n,u),f=a(t,r-n,r,u),l=h(c)+h(f);for(i=n;i<r-n;i++)o=t.children[i],s(c,t.leaf?u(o):o),l+=h(c);for(i=r-n-1;i>=n;i--)o=t.children[i],s(f,t.leaf?u(o):o),l+=h(f);return l},_adjustParentBBoxes:function(t,n,r){for(var e=r;e>=0;e--)s(n[e],t)},_condense:function(t){for(var n,r=t.length-1;r>=0;r--)0===t[r].children.length?r>0?(n=t[r-1].children).splice(n.indexOf(t[r]),1):this.clear():u(t[r],this.toBBox)},_initFormat:function(t){var n=["return a"," - b",";"];this.compareMinX=new Function("a","b",n.join(t[0])),this.compareMinY=new Function("a","b",n.join(t[1])),this.toBBox=new Function("a","return {minX: a"+t[0]+", minY: a"+t[1]+", maxX: a"+t[2]+", maxY: a"+t[3]+"};")}}},function(t,n,r){t.exports=function(){"use strict";function t(t,n,r){var e=t[n];t[n]=t[r],t[r]=e}function n(t,n){return t<n?-1:t>n?1:0}return function(r,e,i,o,u){!function n(r,e,i,o,u){for(;o>i;){if(o-i>600){var a=o-i+1,s=e-i+1,c=Math.log(a),f=.5*Math.exp(2*c/3),l=.5*Math.sqrt(c*f*(a-f)/a)*(s-a/2<0?-1:1),h=Math.max(i,Math.floor(e-s*f/a+l)),v=Math.min(o,Math.floor(e+(a-s)*f/a+l));n(r,e,h,v,u)}var p=r[e],d=i,g=o;for(t(r,i,e),u(r[o],p)>0&&t(r,i,o);d<g;){for(t(r,d,g),d++,g--;u(r[d],p)<0;)d++;for(;u(r[g],p)>0;)g--}0===u(r[i],p)?t(r,i,g):(g++,t(r,g,o)),g<=e&&(i=g+1),e<=g&&(o=g-1)}}(r,e,i||0,o||r.length-1,u||n)}}()},function(t,n){t.exports=function(t,n){for(var r=t[0],e=t[1],i=!1,o=0,u=n.length-1;o<n.length;u=o++){var a=n[o][0],s=n[o][1],c=n[u][0],f=n[u][1];s>e!=f>e&&r<(c-a)*(e-s)/(f-s)+a&&(i=!i)}return i}},function(t,n,r){"use strict";t.exports={getBoundingBox:function(t){for(var n=t[0],r={minX:n[0],minY:n[1],maxX:n[0],maxY:n[1]},e=1;e<t.length;e++){var i=t[e],o=i[0];o<r.minX?r.minX=o:o>r.maxX&&(r.maxX=o);var u=i[1];u<r.minY?r.minY=u:u>r.maxY&&(r.maxY=u)}return r}}},function(t,n,r){(function(t,e){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o="Expected a function",u="__lodash_placeholder__",a=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],s="[object Arguments]",c="[object Array]",f="[object Boolean]",l="[object Date]",h="[object Error]",v="[object Function]",p="[object GeneratorFunction]",d="[object Map]",g="[object Number]",y="[object Object]",_="[object RegExp]",m="[object Set]",x="[object String]",w="[object Symbol]",b="[object WeakMap]",S="[object ArrayBuffer]",A="[object DataView]",L="[object Float32Array]",E="[object Float64Array]",k="[object Int8Array]",M="[object Int16Array]",F="[object Int32Array]",B="[object Uint8Array]",C="[object Uint16Array]",j="[object Uint32Array]",z=/\b__p \+= '';/g,R=/\b(__p \+=) '' \+/g,O=/(__e\(.*?\)|\b__t\)) \+\n'';/g,P=/&(?:amp|lt|gt|quot|#39);/g,T=/[&<>"']/g,I=RegExp(P.source),N=RegExp(T.source),Y=/<%-([\s\S]+?)%>/g,U=/<%([\s\S]+?)%>/g,D=/<%=([\s\S]+?)%>/g,W=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Z=/^\w*$/,X=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,K=/[\\^$.*+?()[\]{}|]/g,V=RegExp(K.source),H=/^\s+|\s+$/g,$=/^\s+/,q=/\s+$/,G=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,J=/\{\n\/\* \[wrapped with (.+)\] \*/,Q=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,nt=/\\(\\)?/g,rt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,et=/\w*$/,it=/^[-+]0x[0-9a-f]+$/i,ot=/^0b[01]+$/i,ut=/^\[object .+?Constructor\]$/,at=/^0o[0-7]+$/i,st=/^(?:0|[1-9]\d*)$/,ct=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ft=/($^)/,lt=/['\n\r\u2028\u2029\\]/g,ht="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",vt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",pt="[\\ud800-\\udfff]",dt="["+vt+"]",gt="["+ht+"]",yt="\\d+",_t="[\\u2700-\\u27bf]",mt="[a-z\\xdf-\\xf6\\xf8-\\xff]",xt="[^\\ud800-\\udfff"+vt+yt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",wt="\\ud83c[\\udffb-\\udfff]",bt="[^\\ud800-\\udfff]",St="(?:\\ud83c[\\udde6-\\uddff]){2}",At="[\\ud800-\\udbff][\\udc00-\\udfff]",Lt="[A-Z\\xc0-\\xd6\\xd8-\\xde]",Et="(?:"+mt+"|"+xt+")",kt="(?:"+Lt+"|"+xt+")",Mt="(?:"+gt+"|"+wt+")"+"?",Ft="[\\ufe0e\\ufe0f]?"+Mt+("(?:\\u200d(?:"+[bt,St,At].join("|")+")[\\ufe0e\\ufe0f]?"+Mt+")*"),Bt="(?:"+[_t,St,At].join("|")+")"+Ft,Ct="(?:"+[bt+gt+"?",gt,St,At,pt].join("|")+")",jt=RegExp("['’]","g"),zt=RegExp(gt,"g"),Rt=RegExp(wt+"(?="+wt+")|"+Ct+Ft,"g"),Ot=RegExp([Lt+"?"+mt+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[dt,Lt,"$"].join("|")+")",kt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[dt,Lt+Et,"$"].join("|")+")",Lt+"?"+Et+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Lt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",yt,Bt].join("|"),"g"),Pt=RegExp("[\\u200d\\ud800-\\udfff"+ht+"\\ufe0e\\ufe0f]"),Tt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,It=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Nt=-1,Yt={};Yt[L]=Yt[E]=Yt[k]=Yt[M]=Yt[F]=Yt[B]=Yt["[object Uint8ClampedArray]"]=Yt[C]=Yt[j]=!0,Yt[s]=Yt[c]=Yt[S]=Yt[f]=Yt[A]=Yt[l]=Yt[h]=Yt[v]=Yt[d]=Yt[g]=Yt[y]=Yt[_]=Yt[m]=Yt[x]=Yt[b]=!1;var Ut={};Ut[s]=Ut[c]=Ut[S]=Ut[A]=Ut[f]=Ut[l]=Ut[L]=Ut[E]=Ut[k]=Ut[M]=Ut[F]=Ut[d]=Ut[g]=Ut[y]=Ut[_]=Ut[m]=Ut[x]=Ut[w]=Ut[B]=Ut["[object Uint8ClampedArray]"]=Ut[C]=Ut[j]=!0,Ut[h]=Ut[v]=Ut[b]=!1;var Dt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Wt=parseFloat,Zt=parseInt,Xt="object"==typeof t&&t&&t.Object===Object&&t,Kt="object"==typeof self&&self&&self.Object===Object&&self,Vt=Xt||Kt||Function("return this")(),Ht=n&&!n.nodeType&&n,$t=Ht&&"object"==typeof e&&e&&!e.nodeType&&e,qt=$t&&$t.exports===Ht,Gt=qt&&Xt.process,Jt=function(){try{var t=$t&&$t.require&&$t.require("util").types;return t||Gt&&Gt.binding&&Gt.binding("util")}catch(t){}}(),Qt=Jt&&Jt.isArrayBuffer,tn=Jt&&Jt.isDate,nn=Jt&&Jt.isMap,rn=Jt&&Jt.isRegExp,en=Jt&&Jt.isSet,on=Jt&&Jt.isTypedArray;function un(t,n,r){switch(r.length){case 0:return t.call(n);case 1:return t.call(n,r[0]);case 2:return t.call(n,r[0],r[1]);case 3:return t.call(n,r[0],r[1],r[2])}return t.apply(n,r)}function an(t,n,r,e){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];n(e,u,r(u),t)}return e}function sn(t,n){for(var r=-1,e=null==t?0:t.length;++r<e&&!1!==n(t[r],r,t););return t}function cn(t,n){for(var r=null==t?0:t.length;r--&&!1!==n(t[r],r,t););return t}function fn(t,n){for(var r=-1,e=null==t?0:t.length;++r<e;)if(!n(t[r],r,t))return!1;return!0}function ln(t,n){for(var r=-1,e=null==t?0:t.length,i=0,o=[];++r<e;){var u=t[r];n(u,r,t)&&(o[i++]=u)}return o}function hn(t,n){return!!(null==t?0:t.length)&&bn(t,n,0)>-1}function vn(t,n,r){for(var e=-1,i=null==t?0:t.length;++e<i;)if(r(n,t[e]))return!0;return!1}function pn(t,n){for(var r=-1,e=null==t?0:t.length,i=Array(e);++r<e;)i[r]=n(t[r],r,t);return i}function dn(t,n){for(var r=-1,e=n.length,i=t.length;++r<e;)t[i+r]=n[r];return t}function gn(t,n,r,e){var i=-1,o=null==t?0:t.length;for(e&&o&&(r=t[++i]);++i<o;)r=n(r,t[i],i,t);return r}function yn(t,n,r,e){var i=null==t?0:t.length;for(e&&i&&(r=t[--i]);i--;)r=n(r,t[i],i,t);return r}function _n(t,n){for(var r=-1,e=null==t?0:t.length;++r<e;)if(n(t[r],r,t))return!0;return!1}var mn=En("length");function xn(t,n,r){var e;return r(t,(function(t,r,i){if(n(t,r,i))return e=r,!1})),e}function wn(t,n,r,e){for(var i=t.length,o=r+(e?1:-1);e?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function bn(t,n,r){return n==n?function(t,n,r){var e=r-1,i=t.length;for(;++e<i;)if(t[e]===n)return e;return-1}(t,n,r):wn(t,An,r)}function Sn(t,n,r,e){for(var i=r-1,o=t.length;++i<o;)if(e(t[i],n))return i;return-1}function An(t){return t!=t}function Ln(t,n){var r=null==t?0:t.length;return r?Fn(t,n)/r:NaN}function En(t){return function(n){return null==n?void 0:n[t]}}function kn(t){return function(n){return null==t?void 0:t[n]}}function Mn(t,n,r,e,i){return i(t,(function(t,i,o){r=e?(e=!1,t):n(r,t,i,o)})),r}function Fn(t,n){for(var r,e=-1,i=t.length;++e<i;){var o=n(t[e]);void 0!==o&&(r=void 0===r?o:r+o)}return r}function Bn(t,n){for(var r=-1,e=Array(t);++r<t;)e[r]=n(r);return e}function Cn(t){return function(n){return t(n)}}function jn(t,n){return pn(n,(function(n){return t[n]}))}function zn(t,n){return t.has(n)}function Rn(t,n){for(var r=-1,e=t.length;++r<e&&bn(n,t[r],0)>-1;);return r}function On(t,n){for(var r=t.length;r--&&bn(n,t[r],0)>-1;);return r}function Pn(t,n){for(var r=t.length,e=0;r--;)t[r]===n&&++e;return e}var Tn=kn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),In=kn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Nn(t){return"\\"+Dt[t]}function Yn(t){return Pt.test(t)}function Un(t){var n=-1,r=Array(t.size);return t.forEach((function(t,e){r[++n]=[e,t]})),r}function Dn(t,n){return function(r){return t(n(r))}}function Wn(t,n){for(var r=-1,e=t.length,i=0,o=[];++r<e;){var a=t[r];a!==n&&a!==u||(t[r]=u,o[i++]=r)}return o}function Zn(t){var n=-1,r=Array(t.size);return t.forEach((function(t){r[++n]=t})),r}function Xn(t){var n=-1,r=Array(t.size);return t.forEach((function(t){r[++n]=[t,t]})),r}function Kn(t){return Yn(t)?function(t){var n=Rt.lastIndex=0;for(;Rt.test(t);)++n;return n}(t):mn(t)}function Vn(t){return Yn(t)?function(t){return t.match(Rt)||[]}(t):function(t){return t.split("")}(t)}var Hn=kn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var $n=function t(n){var r,e=(n=null==n?Vt:$n.defaults(Vt.Object(),n,$n.pick(Vt,It))).Array,i=n.Date,ht=n.Error,vt=n.Function,pt=n.Math,dt=n.Object,gt=n.RegExp,yt=n.String,_t=n.TypeError,mt=e.prototype,xt=vt.prototype,wt=dt.prototype,bt=n["__core-js_shared__"],St=xt.toString,At=wt.hasOwnProperty,Lt=0,Et=(r=/[^.]+$/.exec(bt&&bt.keys&&bt.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"",kt=wt.toString,Mt=St.call(dt),Ft=Vt._,Bt=gt("^"+St.call(At).replace(K,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ct=qt?n.Buffer:void 0,Rt=n.Symbol,Pt=n.Uint8Array,Dt=Ct?Ct.allocUnsafe:void 0,Xt=Dn(dt.getPrototypeOf,dt),Kt=dt.create,Ht=wt.propertyIsEnumerable,$t=mt.splice,Gt=Rt?Rt.isConcatSpreadable:void 0,Jt=Rt?Rt.iterator:void 0,mn=Rt?Rt.toStringTag:void 0,kn=function(){try{var t=Qi(dt,"defineProperty");return t({},"",{}),t}catch(t){}}(),qn=n.clearTimeout!==Vt.clearTimeout&&n.clearTimeout,Gn=i&&i.now!==Vt.Date.now&&i.now,Jn=n.setTimeout!==Vt.setTimeout&&n.setTimeout,Qn=pt.ceil,tr=pt.floor,nr=dt.getOwnPropertySymbols,rr=Ct?Ct.isBuffer:void 0,er=n.isFinite,ir=mt.join,or=Dn(dt.keys,dt),ur=pt.max,ar=pt.min,sr=i.now,cr=n.parseInt,fr=pt.random,lr=mt.reverse,hr=Qi(n,"DataView"),vr=Qi(n,"Map"),pr=Qi(n,"Promise"),dr=Qi(n,"Set"),gr=Qi(n,"WeakMap"),yr=Qi(dt,"create"),_r=gr&&new gr,mr={},xr=ko(hr),wr=ko(vr),br=ko(pr),Sr=ko(dr),Ar=ko(gr),Lr=Rt?Rt.prototype:void 0,Er=Lr?Lr.valueOf:void 0,kr=Lr?Lr.toString:void 0;function Mr(t){if(Zu(t)&&!zu(t)&&!(t instanceof jr)){if(t instanceof Cr)return t;if(At.call(t,"__wrapped__"))return Mo(t)}return new Cr(t)}var Fr=function(){function t(){}return function(n){if(!Wu(n))return{};if(Kt)return Kt(n);t.prototype=n;var r=new t;return t.prototype=void 0,r}}();function Br(){}function Cr(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=void 0}function jr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function zr(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function Rr(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function Or(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function Pr(t){var n=-1,r=null==t?0:t.length;for(this.__data__=new Or;++n<r;)this.add(t[n])}function Tr(t){var n=this.__data__=new Rr(t);this.size=n.size}function Ir(t,n){var r=zu(t),e=!r&&ju(t),i=!r&&!e&&Tu(t),o=!r&&!e&&!i&&Ju(t),u=r||e||i||o,a=u?Bn(t.length,yt):[],s=a.length;for(var c in t)!n&&!At.call(t,c)||u&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||uo(c,s))||a.push(c);return a}function Nr(t){var n=t.length;return n?t[Pe(0,n-1)]:void 0}function Yr(t,n){return Ao(yi(t),$r(n,0,t.length))}function Ur(t){return Ao(yi(t))}function Dr(t,n,r){(void 0!==r&&!Fu(t[n],r)||void 0===r&&!(n in t))&&Vr(t,n,r)}function Wr(t,n,r){var e=t[n];At.call(t,n)&&Fu(e,r)&&(void 0!==r||n in t)||Vr(t,n,r)}function Zr(t,n){for(var r=t.length;r--;)if(Fu(t[r][0],n))return r;return-1}function Xr(t,n,r,e){return te(t,(function(t,i,o){n(e,t,r(t),o)})),e}function Kr(t,n){return t&&_i(n,xa(n),t)}function Vr(t,n,r){"__proto__"==n&&kn?kn(t,n,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[n]=r}function Hr(t,n){for(var r=-1,i=n.length,o=e(i),u=null==t;++r<i;)o[r]=u?void 0:da(t,n[r]);return o}function $r(t,n,r){return t==t&&(void 0!==r&&(t=t<=r?t:r),void 0!==n&&(t=t>=n?t:n)),t}function qr(t,n,r,e,i,o){var u,a=1&n,c=2&n,h=4&n;if(r&&(u=i?r(t,e,i,o):r(t)),void 0!==u)return u;if(!Wu(t))return t;var b=zu(t);if(b){if(u=function(t){var n=t.length,r=new t.constructor(n);n&&"string"==typeof t[0]&&At.call(t,"index")&&(r.index=t.index,r.input=t.input);return r}(t),!a)return yi(t,u)}else{var z=ro(t),R=z==v||z==p;if(Tu(t))return li(t,a);if(z==y||z==s||R&&!i){if(u=c||R?{}:io(t),!a)return c?function(t,n){return _i(t,no(t),n)}(t,function(t,n){return t&&_i(n,wa(n),t)}(u,t)):function(t,n){return _i(t,to(t),n)}(t,Kr(u,t))}else{if(!Ut[z])return i?t:{};u=function(t,n,r){var e=t.constructor;switch(n){case S:return hi(t);case f:case l:return new e(+t);case A:return function(t,n){var r=n?hi(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}(t,r);case L:case E:case k:case M:case F:case B:case"[object Uint8ClampedArray]":case C:case j:return vi(t,r);case d:return new e;case g:case x:return new e(t);case _:return function(t){var n=new t.constructor(t.source,et.exec(t));return n.lastIndex=t.lastIndex,n}(t);case m:return new e;case w:return i=t,Er?dt(Er.call(i)):{}}var i}(t,z,a)}}o||(o=new Tr);var O=o.get(t);if(O)return O;o.set(t,u),$u(t)?t.forEach((function(e){u.add(qr(e,n,r,e,t,o))})):Xu(t)&&t.forEach((function(e,i){u.set(i,qr(e,n,r,i,t,o))}));var P=b?void 0:(h?c?Ki:Xi:c?wa:xa)(t);return sn(P||t,(function(e,i){P&&(e=t[i=e]),Wr(u,i,qr(e,n,r,i,t,o))})),u}function Gr(t,n,r){var e=r.length;if(null==t)return!e;for(t=dt(t);e--;){var i=r[e],o=n[i],u=t[i];if(void 0===u&&!(i in t)||!o(u))return!1}return!0}function Jr(t,n,r){if("function"!=typeof t)throw new _t(o);return xo((function(){t.apply(void 0,r)}),n)}function Qr(t,n,r,e){var i=-1,o=hn,u=!0,a=t.length,s=[],c=n.length;if(!a)return s;r&&(n=pn(n,Cn(r))),e?(o=vn,u=!1):n.length>=200&&(o=zn,u=!1,n=new Pr(n));t:for(;++i<a;){var f=t[i],l=null==r?f:r(f);if(f=e||0!==f?f:0,u&&l==l){for(var h=c;h--;)if(n[h]===l)continue t;s.push(f)}else o(n,l,e)||s.push(f)}return s}Mr.templateSettings={escape:Y,evaluate:U,interpolate:D,variable:"",imports:{_:Mr}},Mr.prototype=Br.prototype,Mr.prototype.constructor=Mr,Cr.prototype=Fr(Br.prototype),Cr.prototype.constructor=Cr,jr.prototype=Fr(Br.prototype),jr.prototype.constructor=jr,zr.prototype.clear=function(){this.__data__=yr?yr(null):{},this.size=0},zr.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},zr.prototype.get=function(t){var n=this.__data__;if(yr){var r=n[t];return"__lodash_hash_undefined__"===r?void 0:r}return At.call(n,t)?n[t]:void 0},zr.prototype.has=function(t){var n=this.__data__;return yr?void 0!==n[t]:At.call(n,t)},zr.prototype.set=function(t,n){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=yr&&void 0===n?"__lodash_hash_undefined__":n,this},Rr.prototype.clear=function(){this.__data__=[],this.size=0},Rr.prototype.delete=function(t){var n=this.__data__,r=Zr(n,t);return!(r<0)&&(r==n.length-1?n.pop():$t.call(n,r,1),--this.size,!0)},Rr.prototype.get=function(t){var n=this.__data__,r=Zr(n,t);return r<0?void 0:n[r][1]},Rr.prototype.has=function(t){return Zr(this.__data__,t)>-1},Rr.prototype.set=function(t,n){var r=this.__data__,e=Zr(r,t);return e<0?(++this.size,r.push([t,n])):r[e][1]=n,this},Or.prototype.clear=function(){this.size=0,this.__data__={hash:new zr,map:new(vr||Rr),string:new zr}},Or.prototype.delete=function(t){var n=Gi(this,t).delete(t);return this.size-=n?1:0,n},Or.prototype.get=function(t){return Gi(this,t).get(t)},Or.prototype.has=function(t){return Gi(this,t).has(t)},Or.prototype.set=function(t,n){var r=Gi(this,t),e=r.size;return r.set(t,n),this.size+=r.size==e?0:1,this},Pr.prototype.add=Pr.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Pr.prototype.has=function(t){return this.__data__.has(t)},Tr.prototype.clear=function(){this.__data__=new Rr,this.size=0},Tr.prototype.delete=function(t){var n=this.__data__,r=n.delete(t);return this.size=n.size,r},Tr.prototype.get=function(t){return this.__data__.get(t)},Tr.prototype.has=function(t){return this.__data__.has(t)},Tr.prototype.set=function(t,n){var r=this.__data__;if(r instanceof Rr){var e=r.__data__;if(!vr||e.length<199)return e.push([t,n]),this.size=++r.size,this;r=this.__data__=new Or(e)}return r.set(t,n),this.size=r.size,this};var te=wi(se),ne=wi(ce,!0);function re(t,n){var r=!0;return te(t,(function(t,e,i){return r=!!n(t,e,i)})),r}function ee(t,n,r){for(var e=-1,i=t.length;++e<i;){var o=t[e],u=n(o);if(null!=u&&(void 0===a?u==u&&!Gu(u):r(u,a)))var a=u,s=o}return s}function ie(t,n){var r=[];return te(t,(function(t,e,i){n(t,e,i)&&r.push(t)})),r}function oe(t,n,r,e,i){var o=-1,u=t.length;for(r||(r=oo),i||(i=[]);++o<u;){var a=t[o];n>0&&r(a)?n>1?oe(a,n-1,r,e,i):dn(i,a):e||(i[i.length]=a)}return i}var ue=bi(),ae=bi(!0);function se(t,n){return t&&ue(t,n,xa)}function ce(t,n){return t&&ae(t,n,xa)}function fe(t,n){return ln(n,(function(n){return Yu(t[n])}))}function le(t,n){for(var r=0,e=(n=ai(n,t)).length;null!=t&&r<e;)t=t[Eo(n[r++])];return r&&r==e?t:void 0}function he(t,n,r){var e=n(t);return zu(t)?e:dn(e,r(t))}function ve(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":mn&&mn in dt(t)?function(t){var n=At.call(t,mn),r=t[mn];try{t[mn]=void 0;var e=!0}catch(t){}var i=kt.call(t);e&&(n?t[mn]=r:delete t[mn]);return i}(t):function(t){return kt.call(t)}(t)}function pe(t,n){return t>n}function de(t,n){return null!=t&&At.call(t,n)}function ge(t,n){return null!=t&&n in dt(t)}function ye(t,n,r){for(var i=r?vn:hn,o=t[0].length,u=t.length,a=u,s=e(u),c=1/0,f=[];a--;){var l=t[a];a&&n&&(l=pn(l,Cn(n))),c=ar(l.length,c),s[a]=!r&&(n||o>=120&&l.length>=120)?new Pr(a&&l):void 0}l=t[0];var h=-1,v=s[0];t:for(;++h<o&&f.length<c;){var p=l[h],d=n?n(p):p;if(p=r||0!==p?p:0,!(v?zn(v,d):i(f,d,r))){for(a=u;--a;){var g=s[a];if(!(g?zn(g,d):i(t[a],d,r)))continue t}v&&v.push(d),f.push(p)}}return f}function _e(t,n,r){var e=null==(t=go(t,n=ai(n,t)))?t:t[Eo(No(n))];return null==e?void 0:un(e,t,r)}function me(t){return Zu(t)&&ve(t)==s}function xe(t,n,r,e,i){return t===n||(null==t||null==n||!Zu(t)&&!Zu(n)?t!=t&&n!=n:function(t,n,r,e,i,o){var u=zu(t),a=zu(n),v=u?c:ro(t),p=a?c:ro(n),b=(v=v==s?y:v)==y,L=(p=p==s?y:p)==y,E=v==p;if(E&&Tu(t)){if(!Tu(n))return!1;u=!0,b=!1}if(E&&!b)return o||(o=new Tr),u||Ju(t)?Wi(t,n,r,e,i,o):function(t,n,r,e,i,o,u){switch(r){case A:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case S:return!(t.byteLength!=n.byteLength||!o(new Pt(t),new Pt(n)));case f:case l:case g:return Fu(+t,+n);case h:return t.name==n.name&&t.message==n.message;case _:case x:return t==n+"";case d:var a=Un;case m:var s=1&e;if(a||(a=Zn),t.size!=n.size&&!s)return!1;var c=u.get(t);if(c)return c==n;e|=2,u.set(t,n);var v=Wi(a(t),a(n),e,i,o,u);return u.delete(t),v;case w:if(Er)return Er.call(t)==Er.call(n)}return!1}(t,n,v,r,e,i,o);if(!(1&r)){var k=b&&At.call(t,"__wrapped__"),M=L&&At.call(n,"__wrapped__");if(k||M){var F=k?t.value():t,B=M?n.value():n;return o||(o=new Tr),i(F,B,r,e,o)}}if(!E)return!1;return o||(o=new Tr),function(t,n,r,e,i,o){var u=1&r,a=Xi(t),s=a.length,c=Xi(n).length;if(s!=c&&!u)return!1;var f=s;for(;f--;){var l=a[f];if(!(u?l in n:At.call(n,l)))return!1}var h=o.get(t),v=o.get(n);if(h&&v)return h==n&&v==t;var p=!0;o.set(t,n),o.set(n,t);var d=u;for(;++f<s;){l=a[f];var g=t[l],y=n[l];if(e)var _=u?e(y,g,l,n,t,o):e(g,y,l,t,n,o);if(!(void 0===_?g===y||i(g,y,r,e,o):_)){p=!1;break}d||(d="constructor"==l)}if(p&&!d){var m=t.constructor,x=n.constructor;m==x||!("constructor"in t)||!("constructor"in n)||"function"==typeof m&&m instanceof m&&"function"==typeof x&&x instanceof x||(p=!1)}return o.delete(t),o.delete(n),p}(t,n,r,e,i,o)}(t,n,r,e,xe,i))}function we(t,n,r,e){var i=r.length,o=i,u=!e;if(null==t)return!o;for(t=dt(t);i--;){var a=r[i];if(u&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<o;){var s=(a=r[i])[0],c=t[s],f=a[1];if(u&&a[2]){if(void 0===c&&!(s in t))return!1}else{var l=new Tr;if(e)var h=e(c,f,s,t,n,l);if(!(void 0===h?xe(f,c,3,e,l):h))return!1}}return!0}function be(t){return!(!Wu(t)||(n=t,Et&&Et in n))&&(Yu(t)?Bt:ut).test(ko(t));var n}function Se(t){return"function"==typeof t?t:null==t?Ka:"object"==typeof t?zu(t)?Fe(t[0],t[1]):Me(t):ns(t)}function Ae(t){if(!lo(t))return or(t);var n=[];for(var r in dt(t))At.call(t,r)&&"constructor"!=r&&n.push(r);return n}function Le(t){if(!Wu(t))return function(t){var n=[];if(null!=t)for(var r in dt(t))n.push(r);return n}(t);var n=lo(t),r=[];for(var e in t)("constructor"!=e||!n&&At.call(t,e))&&r.push(e);return r}function Ee(t,n){return t<n}function ke(t,n){var r=-1,i=Ou(t)?e(t.length):[];return te(t,(function(t,e,o){i[++r]=n(t,e,o)})),i}function Me(t){var n=Ji(t);return 1==n.length&&n[0][2]?vo(n[0][0],n[0][1]):function(r){return r===t||we(r,t,n)}}function Fe(t,n){return so(t)&&ho(n)?vo(Eo(t),n):function(r){var e=da(r,t);return void 0===e&&e===n?ga(r,t):xe(n,e,3)}}function Be(t,n,r,e,i){t!==n&&ue(n,(function(o,u){if(i||(i=new Tr),Wu(o))!function(t,n,r,e,i,o,u){var a=_o(t,r),s=_o(n,r),c=u.get(s);if(c)return void Dr(t,r,c);var f=o?o(a,s,r+"",t,n,u):void 0,l=void 0===f;if(l){var h=zu(s),v=!h&&Tu(s),p=!h&&!v&&Ju(s);f=s,h||v||p?zu(a)?f=a:Pu(a)?f=yi(a):v?(l=!1,f=li(s,!0)):p?(l=!1,f=vi(s,!0)):f=[]:Vu(s)||ju(s)?(f=a,ju(a)?f=ua(a):Wu(a)&&!Yu(a)||(f=io(s))):l=!1}l&&(u.set(s,f),i(f,s,e,o,u),u.delete(s));Dr(t,r,f)}(t,n,u,r,Be,e,i);else{var a=e?e(_o(t,u),o,u+"",t,n,i):void 0;void 0===a&&(a=o),Dr(t,u,a)}}),wa)}function Ce(t,n){var r=t.length;if(r)return uo(n+=n<0?r:0,r)?t[n]:void 0}function je(t,n,r){n=n.length?pn(n,(function(t){return zu(t)?function(n){return le(n,1===t.length?t[0]:t)}:t})):[Ka];var e=-1;return n=pn(n,Cn(qi())),function(t,n){var r=t.length;for(t.sort(n);r--;)t[r]=t[r].value;return t}(ke(t,(function(t,r,i){return{criteria:pn(n,(function(n){return n(t)})),index:++e,value:t}})),(function(t,n){return function(t,n,r){var e=-1,i=t.criteria,o=n.criteria,u=i.length,a=r.length;for(;++e<u;){var s=pi(i[e],o[e]);if(s){if(e>=a)return s;var c=r[e];return s*("desc"==c?-1:1)}}return t.index-n.index}(t,n,r)}))}function ze(t,n,r){for(var e=-1,i=n.length,o={};++e<i;){var u=n[e],a=le(t,u);r(a,u)&&Ue(o,ai(u,t),a)}return o}function Re(t,n,r,e){var i=e?Sn:bn,o=-1,u=n.length,a=t;for(t===n&&(n=yi(n)),r&&(a=pn(t,Cn(r)));++o<u;)for(var s=0,c=n[o],f=r?r(c):c;(s=i(a,f,s,e))>-1;)a!==t&&$t.call(a,s,1),$t.call(t,s,1);return t}function Oe(t,n){for(var r=t?n.length:0,e=r-1;r--;){var i=n[r];if(r==e||i!==o){var o=i;uo(i)?$t.call(t,i,1):Qe(t,i)}}return t}function Pe(t,n){return t+tr(fr()*(n-t+1))}function Te(t,n){var r="";if(!t||n<1||n>9007199254740991)return r;do{n%2&&(r+=t),(n=tr(n/2))&&(t+=t)}while(n);return r}function Ie(t,n){return wo(po(t,n,Ka),t+"")}function Ne(t){return Nr(Fa(t))}function Ye(t,n){var r=Fa(t);return Ao(r,$r(n,0,r.length))}function Ue(t,n,r,e){if(!Wu(t))return t;for(var i=-1,o=(n=ai(n,t)).length,u=o-1,a=t;null!=a&&++i<o;){var s=Eo(n[i]),c=r;if("__proto__"===s||"constructor"===s||"prototype"===s)return t;if(i!=u){var f=a[s];void 0===(c=e?e(f,s,a):void 0)&&(c=Wu(f)?f:uo(n[i+1])?[]:{})}Wr(a,s,c),a=a[s]}return t}var De=_r?function(t,n){return _r.set(t,n),t}:Ka,We=kn?function(t,n){return kn(t,"toString",{configurable:!0,enumerable:!1,value:Wa(n),writable:!0})}:Ka;function Ze(t){return Ao(Fa(t))}function Xe(t,n,r){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(r=r>o?o:r)<0&&(r+=o),o=n>r?0:r-n>>>0,n>>>=0;for(var u=e(o);++i<o;)u[i]=t[i+n];return u}function Ke(t,n){var r;return te(t,(function(t,e,i){return!(r=n(t,e,i))})),!!r}function Ve(t,n,r){var e=0,i=null==t?e:t.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;e<i;){var o=e+i>>>1,u=t[o];null!==u&&!Gu(u)&&(r?u<=n:u<n)?e=o+1:i=o}return i}return He(t,n,Ka,r)}function He(t,n,r,e){var i=0,o=null==t?0:t.length;if(0===o)return 0;for(var u=(n=r(n))!=n,a=null===n,s=Gu(n),c=void 0===n;i<o;){var f=tr((i+o)/2),l=r(t[f]),h=void 0!==l,v=null===l,p=l==l,d=Gu(l);if(u)var g=e||p;else g=c?p&&(e||h):a?p&&h&&(e||!v):s?p&&h&&!v&&(e||!d):!v&&!d&&(e?l<=n:l<n);g?i=f+1:o=f}return ar(o,4294967294)}function $e(t,n){for(var r=-1,e=t.length,i=0,o=[];++r<e;){var u=t[r],a=n?n(u):u;if(!r||!Fu(a,s)){var s=a;o[i++]=0===u?0:u}}return o}function qe(t){return"number"==typeof t?t:Gu(t)?NaN:+t}function Ge(t){if("string"==typeof t)return t;if(zu(t))return pn(t,Ge)+"";if(Gu(t))return kr?kr.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function Je(t,n,r){var e=-1,i=hn,o=t.length,u=!0,a=[],s=a;if(r)u=!1,i=vn;else if(o>=200){var c=n?null:Ti(t);if(c)return Zn(c);u=!1,i=zn,s=new Pr}else s=n?[]:a;t:for(;++e<o;){var f=t[e],l=n?n(f):f;if(f=r||0!==f?f:0,u&&l==l){for(var h=s.length;h--;)if(s[h]===l)continue t;n&&s.push(l),a.push(f)}else i(s,l,r)||(s!==a&&s.push(l),a.push(f))}return a}function Qe(t,n){return null==(t=go(t,n=ai(n,t)))||delete t[Eo(No(n))]}function ti(t,n,r,e){return Ue(t,n,r(le(t,n)),e)}function ni(t,n,r,e){for(var i=t.length,o=e?i:-1;(e?o--:++o<i)&&n(t[o],o,t););return r?Xe(t,e?0:o,e?o+1:i):Xe(t,e?o+1:0,e?i:o)}function ri(t,n){var r=t;return r instanceof jr&&(r=r.value()),gn(n,(function(t,n){return n.func.apply(n.thisArg,dn([t],n.args))}),r)}function ei(t,n,r){var i=t.length;if(i<2)return i?Je(t[0]):[];for(var o=-1,u=e(i);++o<i;)for(var a=t[o],s=-1;++s<i;)s!=o&&(u[o]=Qr(u[o]||a,t[s],n,r));return Je(oe(u,1),n,r)}function ii(t,n,r){for(var e=-1,i=t.length,o=n.length,u={};++e<i;){var a=e<o?n[e]:void 0;r(u,t[e],a)}return u}function oi(t){return Pu(t)?t:[]}function ui(t){return"function"==typeof t?t:Ka}function ai(t,n){return zu(t)?t:so(t,n)?[t]:Lo(aa(t))}var si=Ie;function ci(t,n,r){var e=t.length;return r=void 0===r?e:r,!n&&r>=e?t:Xe(t,n,r)}var fi=qn||function(t){return Vt.clearTimeout(t)};function li(t,n){if(n)return t.slice();var r=t.length,e=Dt?Dt(r):new t.constructor(r);return t.copy(e),e}function hi(t){var n=new t.constructor(t.byteLength);return new Pt(n).set(new Pt(t)),n}function vi(t,n){var r=n?hi(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}function pi(t,n){if(t!==n){var r=void 0!==t,e=null===t,i=t==t,o=Gu(t),u=void 0!==n,a=null===n,s=n==n,c=Gu(n);if(!a&&!c&&!o&&t>n||o&&u&&s&&!a&&!c||e&&u&&s||!r&&s||!i)return 1;if(!e&&!o&&!c&&t<n||c&&r&&i&&!e&&!o||a&&r&&i||!u&&i||!s)return-1}return 0}function di(t,n,r,i){for(var o=-1,u=t.length,a=r.length,s=-1,c=n.length,f=ur(u-a,0),l=e(c+f),h=!i;++s<c;)l[s]=n[s];for(;++o<a;)(h||o<u)&&(l[r[o]]=t[o]);for(;f--;)l[s++]=t[o++];return l}function gi(t,n,r,i){for(var o=-1,u=t.length,a=-1,s=r.length,c=-1,f=n.length,l=ur(u-s,0),h=e(l+f),v=!i;++o<l;)h[o]=t[o];for(var p=o;++c<f;)h[p+c]=n[c];for(;++a<s;)(v||o<u)&&(h[p+r[a]]=t[o++]);return h}function yi(t,n){var r=-1,i=t.length;for(n||(n=e(i));++r<i;)n[r]=t[r];return n}function _i(t,n,r,e){var i=!r;r||(r={});for(var o=-1,u=n.length;++o<u;){var a=n[o],s=e?e(r[a],t[a],a,r,t):void 0;void 0===s&&(s=t[a]),i?Vr(r,a,s):Wr(r,a,s)}return r}function mi(t,n){return function(r,e){var i=zu(r)?an:Xr,o=n?n():{};return i(r,t,qi(e,2),o)}}function xi(t){return Ie((function(n,r){var e=-1,i=r.length,o=i>1?r[i-1]:void 0,u=i>2?r[2]:void 0;for(o=t.length>3&&"function"==typeof o?(i--,o):void 0,u&&ao(r[0],r[1],u)&&(o=i<3?void 0:o,i=1),n=dt(n);++e<i;){var a=r[e];a&&t(n,a,e,o)}return n}))}function wi(t,n){return function(r,e){if(null==r)return r;if(!Ou(r))return t(r,e);for(var i=r.length,o=n?i:-1,u=dt(r);(n?o--:++o<i)&&!1!==e(u[o],o,u););return r}}function bi(t){return function(n,r,e){for(var i=-1,o=dt(n),u=e(n),a=u.length;a--;){var s=u[t?a:++i];if(!1===r(o[s],s,o))break}return n}}function Si(t){return function(n){var r=Yn(n=aa(n))?Vn(n):void 0,e=r?r[0]:n.charAt(0),i=r?ci(r,1).join(""):n.slice(1);return e[t]()+i}}function Ai(t){return function(n){return gn(Ya(ja(n).replace(jt,"")),t,"")}}function Li(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var r=Fr(t.prototype),e=t.apply(r,n);return Wu(e)?e:r}}function Ei(t){return function(n,r,e){var i=dt(n);if(!Ou(n)){var o=qi(r,3);n=xa(n),r=function(t){return o(i[t],t,i)}}var u=t(n,r,e);return u>-1?i[o?n[u]:u]:void 0}}function ki(t){return Zi((function(n){var r=n.length,e=r,i=Cr.prototype.thru;for(t&&n.reverse();e--;){var u=n[e];if("function"!=typeof u)throw new _t(o);if(i&&!a&&"wrapper"==Hi(u))var a=new Cr([],!0)}for(e=a?e:r;++e<r;){var s=Hi(u=n[e]),c="wrapper"==s?Vi(u):void 0;a=c&&co(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?a[Hi(c[0])].apply(a,c[3]):1==u.length&&co(u)?a[s]():a.thru(u)}return function(){var t=arguments,e=t[0];if(a&&1==t.length&&zu(e))return a.plant(e).value();for(var i=0,o=r?n[i].apply(this,t):e;++i<r;)o=n[i].call(this,o);return o}}))}function Mi(t,n,r,i,o,u,a,s,c,f){var l=128&n,h=1&n,v=2&n,p=24&n,d=512&n,g=v?void 0:Li(t);return function y(){for(var _=arguments.length,m=e(_),x=_;x--;)m[x]=arguments[x];if(p)var w=$i(y),b=Pn(m,w);if(i&&(m=di(m,i,o,p)),u&&(m=gi(m,u,a,p)),_-=b,p&&_<f){var S=Wn(m,w);return Oi(t,n,Mi,y.placeholder,r,m,S,s,c,f-_)}var A=h?r:this,L=v?A[t]:t;return _=m.length,s?m=yo(m,s):d&&_>1&&m.reverse(),l&&c<_&&(m.length=c),this&&this!==Vt&&this instanceof y&&(L=g||Li(L)),L.apply(A,m)}}function Fi(t,n){return function(r,e){return function(t,n,r,e){return se(t,(function(t,i,o){n(e,r(t),i,o)})),e}(r,t,n(e),{})}}function Bi(t,n){return function(r,e){var i;if(void 0===r&&void 0===e)return n;if(void 0!==r&&(i=r),void 0!==e){if(void 0===i)return e;"string"==typeof r||"string"==typeof e?(r=Ge(r),e=Ge(e)):(r=qe(r),e=qe(e)),i=t(r,e)}return i}}function Ci(t){return Zi((function(n){return n=pn(n,Cn(qi())),Ie((function(r){var e=this;return t(n,(function(t){return un(t,e,r)}))}))}))}function ji(t,n){var r=(n=void 0===n?" ":Ge(n)).length;if(r<2)return r?Te(n,t):n;var e=Te(n,Qn(t/Kn(n)));return Yn(n)?ci(Vn(e),0,t).join(""):e.slice(0,t)}function zi(t){return function(n,r,i){return i&&"number"!=typeof i&&ao(n,r,i)&&(r=i=void 0),n=ra(n),void 0===r?(r=n,n=0):r=ra(r),function(t,n,r,i){for(var o=-1,u=ur(Qn((n-t)/(r||1)),0),a=e(u);u--;)a[i?u:++o]=t,t+=r;return a}(n,r,i=void 0===i?n<r?1:-1:ra(i),t)}}function Ri(t){return function(n,r){return"string"==typeof n&&"string"==typeof r||(n=oa(n),r=oa(r)),t(n,r)}}function Oi(t,n,r,e,i,o,u,a,s,c){var f=8&n;n|=f?32:64,4&(n&=~(f?64:32))||(n&=-4);var l=[t,n,i,f?o:void 0,f?u:void 0,f?void 0:o,f?void 0:u,a,s,c],h=r.apply(void 0,l);return co(t)&&mo(h,l),h.placeholder=e,bo(h,t,n)}function Pi(t){var n=pt[t];return function(t,r){if(t=oa(t),(r=null==r?0:ar(ea(r),292))&&er(t)){var e=(aa(t)+"e").split("e");return+((e=(aa(n(e[0]+"e"+(+e[1]+r)))+"e").split("e"))[0]+"e"+(+e[1]-r))}return n(t)}}var Ti=dr&&1/Zn(new dr([,-0]))[1]==1/0?function(t){return new dr(t)}:Ga;function Ii(t){return function(n){var r=ro(n);return r==d?Un(n):r==m?Xn(n):function(t,n){return pn(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function Ni(t,n,r,i,a,s,c,f){var l=2&n;if(!l&&"function"!=typeof t)throw new _t(o);var h=i?i.length:0;if(h||(n&=-97,i=a=void 0),c=void 0===c?c:ur(ea(c),0),f=void 0===f?f:ea(f),h-=a?a.length:0,64&n){var v=i,p=a;i=a=void 0}var d=l?void 0:Vi(t),g=[t,n,r,i,a,v,p,s,c,f];if(d&&function(t,n){var r=t[1],e=n[1],i=r|e,o=i<131,a=128==e&&8==r||128==e&&256==r&&t[7].length<=n[8]||384==e&&n[7].length<=n[8]&&8==r;if(!o&&!a)return t;1&e&&(t[2]=n[2],i|=1&r?0:4);var s=n[3];if(s){var c=t[3];t[3]=c?di(c,s,n[4]):s,t[4]=c?Wn(t[3],u):n[4]}(s=n[5])&&(c=t[5],t[5]=c?gi(c,s,n[6]):s,t[6]=c?Wn(t[5],u):n[6]);(s=n[7])&&(t[7]=s);128&e&&(t[8]=null==t[8]?n[8]:ar(t[8],n[8]));null==t[9]&&(t[9]=n[9]);t[0]=n[0],t[1]=i}(g,d),t=g[0],n=g[1],r=g[2],i=g[3],a=g[4],!(f=g[9]=void 0===g[9]?l?0:t.length:ur(g[9]-h,0))&&24&n&&(n&=-25),n&&1!=n)y=8==n||16==n?function(t,n,r){var i=Li(t);return function o(){for(var u=arguments.length,a=e(u),s=u,c=$i(o);s--;)a[s]=arguments[s];var f=u<3&&a[0]!==c&&a[u-1]!==c?[]:Wn(a,c);if((u-=f.length)<r)return Oi(t,n,Mi,o.placeholder,void 0,a,f,void 0,void 0,r-u);var l=this&&this!==Vt&&this instanceof o?i:t;return un(l,this,a)}}(t,n,f):32!=n&&33!=n||a.length?Mi.apply(void 0,g):function(t,n,r,i){var o=1&n,u=Li(t);return function n(){for(var a=-1,s=arguments.length,c=-1,f=i.length,l=e(f+s),h=this&&this!==Vt&&this instanceof n?u:t;++c<f;)l[c]=i[c];for(;s--;)l[c++]=arguments[++a];return un(h,o?r:this,l)}}(t,n,r,i);else var y=function(t,n,r){var e=1&n,i=Li(t);return function n(){var o=this&&this!==Vt&&this instanceof n?i:t;return o.apply(e?r:this,arguments)}}(t,n,r);return bo((d?De:mo)(y,g),t,n)}function Yi(t,n,r,e){return void 0===t||Fu(t,wt[r])&&!At.call(e,r)?n:t}function Ui(t,n,r,e,i,o){return Wu(t)&&Wu(n)&&(o.set(n,t),Be(t,n,void 0,Ui,o),o.delete(n)),t}function Di(t){return Vu(t)?void 0:t}function Wi(t,n,r,e,i,o){var u=1&r,a=t.length,s=n.length;if(a!=s&&!(u&&s>a))return!1;var c=o.get(t),f=o.get(n);if(c&&f)return c==n&&f==t;var l=-1,h=!0,v=2&r?new Pr:void 0;for(o.set(t,n),o.set(n,t);++l<a;){var p=t[l],d=n[l];if(e)var g=u?e(d,p,l,n,t,o):e(p,d,l,t,n,o);if(void 0!==g){if(g)continue;h=!1;break}if(v){if(!_n(n,(function(t,n){if(!zn(v,n)&&(p===t||i(p,t,r,e,o)))return v.push(n)}))){h=!1;break}}else if(p!==d&&!i(p,d,r,e,o)){h=!1;break}}return o.delete(t),o.delete(n),h}function Zi(t){return wo(po(t,void 0,Ro),t+"")}function Xi(t){return he(t,xa,to)}function Ki(t){return he(t,wa,no)}var Vi=_r?function(t){return _r.get(t)}:Ga;function Hi(t){for(var n=t.name+"",r=mr[n],e=At.call(mr,n)?r.length:0;e--;){var i=r[e],o=i.func;if(null==o||o==t)return i.name}return n}function $i(t){return(At.call(Mr,"placeholder")?Mr:t).placeholder}function qi(){var t=Mr.iteratee||Va;return t=t===Va?Se:t,arguments.length?t(arguments[0],arguments[1]):t}function Gi(t,n){var r,e,i=t.__data__;return("string"==(e=typeof(r=n))||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==r:null===r)?i["string"==typeof n?"string":"hash"]:i.map}function Ji(t){for(var n=xa(t),r=n.length;r--;){var e=n[r],i=t[e];n[r]=[e,i,ho(i)]}return n}function Qi(t,n){var r=function(t,n){return null==t?void 0:t[n]}(t,n);return be(r)?r:void 0}var to=nr?function(t){return null==t?[]:(t=dt(t),ln(nr(t),(function(n){return Ht.call(t,n)})))}:is,no=nr?function(t){for(var n=[];t;)dn(n,to(t)),t=Xt(t);return n}:is,ro=ve;function eo(t,n,r){for(var e=-1,i=(n=ai(n,t)).length,o=!1;++e<i;){var u=Eo(n[e]);if(!(o=null!=t&&r(t,u)))break;t=t[u]}return o||++e!=i?o:!!(i=null==t?0:t.length)&&Du(i)&&uo(u,i)&&(zu(t)||ju(t))}function io(t){return"function"!=typeof t.constructor||lo(t)?{}:Fr(Xt(t))}function oo(t){return zu(t)||ju(t)||!!(Gt&&t&&t[Gt])}function uo(t,n){var r=typeof t;return!!(n=null==n?9007199254740991:n)&&("number"==r||"symbol"!=r&&st.test(t))&&t>-1&&t%1==0&&t<n}function ao(t,n,r){if(!Wu(r))return!1;var e=typeof n;return!!("number"==e?Ou(r)&&uo(n,r.length):"string"==e&&n in r)&&Fu(r[n],t)}function so(t,n){if(zu(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!Gu(t))||(Z.test(t)||!W.test(t)||null!=n&&t in dt(n))}function co(t){var n=Hi(t),r=Mr[n];if("function"!=typeof r||!(n in jr.prototype))return!1;if(t===r)return!0;var e=Vi(r);return!!e&&t===e[0]}(hr&&ro(new hr(new ArrayBuffer(1)))!=A||vr&&ro(new vr)!=d||pr&&"[object Promise]"!=ro(pr.resolve())||dr&&ro(new dr)!=m||gr&&ro(new gr)!=b)&&(ro=function(t){var n=ve(t),r=n==y?t.constructor:void 0,e=r?ko(r):"";if(e)switch(e){case xr:return A;case wr:return d;case br:return"[object Promise]";case Sr:return m;case Ar:return b}return n});var fo=bt?Yu:os;function lo(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||wt)}function ho(t){return t==t&&!Wu(t)}function vo(t,n){return function(r){return null!=r&&(r[t]===n&&(void 0!==n||t in dt(r)))}}function po(t,n,r){return n=ur(void 0===n?t.length-1:n,0),function(){for(var i=arguments,o=-1,u=ur(i.length-n,0),a=e(u);++o<u;)a[o]=i[n+o];o=-1;for(var s=e(n+1);++o<n;)s[o]=i[o];return s[n]=r(a),un(t,this,s)}}function go(t,n){return n.length<2?t:le(t,Xe(n,0,-1))}function yo(t,n){for(var r=t.length,e=ar(n.length,r),i=yi(t);e--;){var o=n[e];t[e]=uo(o,r)?i[o]:void 0}return t}function _o(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var mo=So(De),xo=Jn||function(t,n){return Vt.setTimeout(t,n)},wo=So(We);function bo(t,n,r){var e=n+"";return wo(t,function(t,n){var r=n.length;if(!r)return t;var e=r-1;return n[e]=(r>1?"& ":"")+n[e],n=n.join(r>2?", ":" "),t.replace(G,"{\n/* [wrapped with "+n+"] */\n")}(e,function(t,n){return sn(a,(function(r){var e="_."+r[0];n&r[1]&&!hn(t,e)&&t.push(e)})),t.sort()}(function(t){var n=t.match(J);return n?n[1].split(Q):[]}(e),r)))}function So(t){var n=0,r=0;return function(){var e=sr(),i=16-(e-r);if(r=e,i>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(void 0,arguments)}}function Ao(t,n){var r=-1,e=t.length,i=e-1;for(n=void 0===n?e:n;++r<n;){var o=Pe(r,i),u=t[o];t[o]=t[r],t[r]=u}return t.length=n,t}var Lo=function(t){var n=Su(t,(function(t){return 500===r.size&&r.clear(),t})),r=n.cache;return n}((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(X,(function(t,r,e,i){n.push(e?i.replace(nt,"$1"):r||t)})),n}));function Eo(t){if("string"==typeof t||Gu(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function ko(t){if(null!=t){try{return St.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Mo(t){if(t instanceof jr)return t.clone();var n=new Cr(t.__wrapped__,t.__chain__);return n.__actions__=yi(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var Fo=Ie((function(t,n){return Pu(t)?Qr(t,oe(n,1,Pu,!0)):[]})),Bo=Ie((function(t,n){var r=No(n);return Pu(r)&&(r=void 0),Pu(t)?Qr(t,oe(n,1,Pu,!0),qi(r,2)):[]})),Co=Ie((function(t,n){var r=No(n);return Pu(r)&&(r=void 0),Pu(t)?Qr(t,oe(n,1,Pu,!0),void 0,r):[]}));function jo(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=null==r?0:ea(r);return i<0&&(i=ur(e+i,0)),wn(t,qi(n,3),i)}function zo(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=e-1;return void 0!==r&&(i=ea(r),i=r<0?ur(e+i,0):ar(i,e-1)),wn(t,qi(n,3),i,!0)}function Ro(t){return(null==t?0:t.length)?oe(t,1):[]}function Oo(t){return t&&t.length?t[0]:void 0}var Po=Ie((function(t){var n=pn(t,oi);return n.length&&n[0]===t[0]?ye(n):[]})),To=Ie((function(t){var n=No(t),r=pn(t,oi);return n===No(r)?n=void 0:r.pop(),r.length&&r[0]===t[0]?ye(r,qi(n,2)):[]})),Io=Ie((function(t){var n=No(t),r=pn(t,oi);return(n="function"==typeof n?n:void 0)&&r.pop(),r.length&&r[0]===t[0]?ye(r,void 0,n):[]}));function No(t){var n=null==t?0:t.length;return n?t[n-1]:void 0}var Yo=Ie(Uo);function Uo(t,n){return t&&t.length&&n&&n.length?Re(t,n):t}var Do=Zi((function(t,n){var r=null==t?0:t.length,e=Hr(t,n);return Oe(t,pn(n,(function(t){return uo(t,r)?+t:t})).sort(pi)),e}));function Wo(t){return null==t?t:lr.call(t)}var Zo=Ie((function(t){return Je(oe(t,1,Pu,!0))})),Xo=Ie((function(t){var n=No(t);return Pu(n)&&(n=void 0),Je(oe(t,1,Pu,!0),qi(n,2))})),Ko=Ie((function(t){var n=No(t);return n="function"==typeof n?n:void 0,Je(oe(t,1,Pu,!0),void 0,n)}));function Vo(t){if(!t||!t.length)return[];var n=0;return t=ln(t,(function(t){if(Pu(t))return n=ur(t.length,n),!0})),Bn(n,(function(n){return pn(t,En(n))}))}function Ho(t,n){if(!t||!t.length)return[];var r=Vo(t);return null==n?r:pn(r,(function(t){return un(n,void 0,t)}))}var $o=Ie((function(t,n){return Pu(t)?Qr(t,n):[]})),qo=Ie((function(t){return ei(ln(t,Pu))})),Go=Ie((function(t){var n=No(t);return Pu(n)&&(n=void 0),ei(ln(t,Pu),qi(n,2))})),Jo=Ie((function(t){var n=No(t);return n="function"==typeof n?n:void 0,ei(ln(t,Pu),void 0,n)})),Qo=Ie(Vo);var tu=Ie((function(t){var n=t.length,r=n>1?t[n-1]:void 0;return r="function"==typeof r?(t.pop(),r):void 0,Ho(t,r)}));function nu(t){var n=Mr(t);return n.__chain__=!0,n}function ru(t,n){return n(t)}var eu=Zi((function(t){var n=t.length,r=n?t[0]:0,e=this.__wrapped__,i=function(n){return Hr(n,t)};return!(n>1||this.__actions__.length)&&e instanceof jr&&uo(r)?((e=e.slice(r,+r+(n?1:0))).__actions__.push({func:ru,args:[i],thisArg:void 0}),new Cr(e,this.__chain__).thru((function(t){return n&&!t.length&&t.push(void 0),t}))):this.thru(i)}));var iu=mi((function(t,n,r){At.call(t,r)?++t[r]:Vr(t,r,1)}));var ou=Ei(jo),uu=Ei(zo);function au(t,n){return(zu(t)?sn:te)(t,qi(n,3))}function su(t,n){return(zu(t)?cn:ne)(t,qi(n,3))}var cu=mi((function(t,n,r){At.call(t,r)?t[r].push(n):Vr(t,r,[n])}));var fu=Ie((function(t,n,r){var i=-1,o="function"==typeof n,u=Ou(t)?e(t.length):[];return te(t,(function(t){u[++i]=o?un(n,t,r):_e(t,n,r)})),u})),lu=mi((function(t,n,r){Vr(t,r,n)}));function hu(t,n){return(zu(t)?pn:ke)(t,qi(n,3))}var vu=mi((function(t,n,r){t[r?0:1].push(n)}),(function(){return[[],[]]}));var pu=Ie((function(t,n){if(null==t)return[];var r=n.length;return r>1&&ao(t,n[0],n[1])?n=[]:r>2&&ao(n[0],n[1],n[2])&&(n=[n[0]]),je(t,oe(n,1),[])})),du=Gn||function(){return Vt.Date.now()};function gu(t,n,r){return n=r?void 0:n,Ni(t,128,void 0,void 0,void 0,void 0,n=t&&null==n?t.length:n)}function yu(t,n){var r;if("function"!=typeof n)throw new _t(o);return t=ea(t),function(){return--t>0&&(r=n.apply(this,arguments)),t<=1&&(n=void 0),r}}var _u=Ie((function(t,n,r){var e=1;if(r.length){var i=Wn(r,$i(_u));e|=32}return Ni(t,e,n,r,i)})),mu=Ie((function(t,n,r){var e=3;if(r.length){var i=Wn(r,$i(mu));e|=32}return Ni(n,e,t,r,i)}));function xu(t,n,r){var e,i,u,a,s,c,f=0,l=!1,h=!1,v=!0;if("function"!=typeof t)throw new _t(o);function p(n){var r=e,o=i;return e=i=void 0,f=n,a=t.apply(o,r)}function d(t){return f=t,s=xo(y,n),l?p(t):a}function g(t){var r=t-c;return void 0===c||r>=n||r<0||h&&t-f>=u}function y(){var t=du();if(g(t))return _(t);s=xo(y,function(t){var r=n-(t-c);return h?ar(r,u-(t-f)):r}(t))}function _(t){return s=void 0,v&&e?p(t):(e=i=void 0,a)}function m(){var t=du(),r=g(t);if(e=arguments,i=this,c=t,r){if(void 0===s)return d(c);if(h)return fi(s),s=xo(y,n),p(c)}return void 0===s&&(s=xo(y,n)),a}return n=oa(n)||0,Wu(r)&&(l=!!r.leading,u=(h="maxWait"in r)?ur(oa(r.maxWait)||0,n):u,v="trailing"in r?!!r.trailing:v),m.cancel=function(){void 0!==s&&fi(s),f=0,e=c=i=s=void 0},m.flush=function(){return void 0===s?a:_(du())},m}var wu=Ie((function(t,n){return Jr(t,1,n)})),bu=Ie((function(t,n,r){return Jr(t,oa(n)||0,r)}));function Su(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new _t(o);var r=function(){var e=arguments,i=n?n.apply(this,e):e[0],o=r.cache;if(o.has(i))return o.get(i);var u=t.apply(this,e);return r.cache=o.set(i,u)||o,u};return r.cache=new(Su.Cache||Or),r}function Au(t){if("function"!=typeof t)throw new _t(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Su.Cache=Or;var Lu=si((function(t,n){var r=(n=1==n.length&&zu(n[0])?pn(n[0],Cn(qi())):pn(oe(n,1),Cn(qi()))).length;return Ie((function(e){for(var i=-1,o=ar(e.length,r);++i<o;)e[i]=n[i].call(this,e[i]);return un(t,this,e)}))})),Eu=Ie((function(t,n){return Ni(t,32,void 0,n,Wn(n,$i(Eu)))})),ku=Ie((function(t,n){return Ni(t,64,void 0,n,Wn(n,$i(ku)))})),Mu=Zi((function(t,n){return Ni(t,256,void 0,void 0,void 0,n)}));function Fu(t,n){return t===n||t!=t&&n!=n}var Bu=Ri(pe),Cu=Ri((function(t,n){return t>=n})),ju=me(function(){return arguments}())?me:function(t){return Zu(t)&&At.call(t,"callee")&&!Ht.call(t,"callee")},zu=e.isArray,Ru=Qt?Cn(Qt):function(t){return Zu(t)&&ve(t)==S};function Ou(t){return null!=t&&Du(t.length)&&!Yu(t)}function Pu(t){return Zu(t)&&Ou(t)}var Tu=rr||os,Iu=tn?Cn(tn):function(t){return Zu(t)&&ve(t)==l};function Nu(t){if(!Zu(t))return!1;var n=ve(t);return n==h||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!Vu(t)}function Yu(t){if(!Wu(t))return!1;var n=ve(t);return n==v||n==p||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Uu(t){return"number"==typeof t&&t==ea(t)}function Du(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Wu(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function Zu(t){return null!=t&&"object"==typeof t}var Xu=nn?Cn(nn):function(t){return Zu(t)&&ro(t)==d};function Ku(t){return"number"==typeof t||Zu(t)&&ve(t)==g}function Vu(t){if(!Zu(t)||ve(t)!=y)return!1;var n=Xt(t);if(null===n)return!0;var r=At.call(n,"constructor")&&n.constructor;return"function"==typeof r&&r instanceof r&&St.call(r)==Mt}var Hu=rn?Cn(rn):function(t){return Zu(t)&&ve(t)==_};var $u=en?Cn(en):function(t){return Zu(t)&&ro(t)==m};function qu(t){return"string"==typeof t||!zu(t)&&Zu(t)&&ve(t)==x}function Gu(t){return"symbol"==typeof t||Zu(t)&&ve(t)==w}var Ju=on?Cn(on):function(t){return Zu(t)&&Du(t.length)&&!!Yt[ve(t)]};var Qu=Ri(Ee),ta=Ri((function(t,n){return t<=n}));function na(t){if(!t)return[];if(Ou(t))return qu(t)?Vn(t):yi(t);if(Jt&&t[Jt])return function(t){for(var n,r=[];!(n=t.next()).done;)r.push(n.value);return r}(t[Jt]());var n=ro(t);return(n==d?Un:n==m?Zn:Fa)(t)}function ra(t){return t?(t=oa(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ea(t){var n=ra(t),r=n%1;return n==n?r?n-r:n:0}function ia(t){return t?$r(ea(t),0,4294967295):0}function oa(t){if("number"==typeof t)return t;if(Gu(t))return NaN;if(Wu(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=Wu(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(H,"");var r=ot.test(t);return r||at.test(t)?Zt(t.slice(2),r?2:8):it.test(t)?NaN:+t}function ua(t){return _i(t,wa(t))}function aa(t){return null==t?"":Ge(t)}var sa=xi((function(t,n){if(lo(n)||Ou(n))_i(n,xa(n),t);else for(var r in n)At.call(n,r)&&Wr(t,r,n[r])})),ca=xi((function(t,n){_i(n,wa(n),t)})),fa=xi((function(t,n,r,e){_i(n,wa(n),t,e)})),la=xi((function(t,n,r,e){_i(n,xa(n),t,e)})),ha=Zi(Hr);var va=Ie((function(t,n){t=dt(t);var r=-1,e=n.length,i=e>2?n[2]:void 0;for(i&&ao(n[0],n[1],i)&&(e=1);++r<e;)for(var o=n[r],u=wa(o),a=-1,s=u.length;++a<s;){var c=u[a],f=t[c];(void 0===f||Fu(f,wt[c])&&!At.call(t,c))&&(t[c]=o[c])}return t})),pa=Ie((function(t){return t.push(void 0,Ui),un(Sa,void 0,t)}));function da(t,n,r){var e=null==t?void 0:le(t,n);return void 0===e?r:e}function ga(t,n){return null!=t&&eo(t,n,ge)}var ya=Fi((function(t,n,r){null!=n&&"function"!=typeof n.toString&&(n=kt.call(n)),t[n]=r}),Wa(Ka)),_a=Fi((function(t,n,r){null!=n&&"function"!=typeof n.toString&&(n=kt.call(n)),At.call(t,n)?t[n].push(r):t[n]=[r]}),qi),ma=Ie(_e);function xa(t){return Ou(t)?Ir(t):Ae(t)}function wa(t){return Ou(t)?Ir(t,!0):Le(t)}var ba=xi((function(t,n,r){Be(t,n,r)})),Sa=xi((function(t,n,r,e){Be(t,n,r,e)})),Aa=Zi((function(t,n){var r={};if(null==t)return r;var e=!1;n=pn(n,(function(n){return n=ai(n,t),e||(e=n.length>1),n})),_i(t,Ki(t),r),e&&(r=qr(r,7,Di));for(var i=n.length;i--;)Qe(r,n[i]);return r}));var La=Zi((function(t,n){return null==t?{}:function(t,n){return ze(t,n,(function(n,r){return ga(t,r)}))}(t,n)}));function Ea(t,n){if(null==t)return{};var r=pn(Ki(t),(function(t){return[t]}));return n=qi(n),ze(t,r,(function(t,r){return n(t,r[0])}))}var ka=Ii(xa),Ma=Ii(wa);function Fa(t){return null==t?[]:jn(t,xa(t))}var Ba=Ai((function(t,n,r){return n=n.toLowerCase(),t+(r?Ca(n):n)}));function Ca(t){return Na(aa(t).toLowerCase())}function ja(t){return(t=aa(t))&&t.replace(ct,Tn).replace(zt,"")}var za=Ai((function(t,n,r){return t+(r?"-":"")+n.toLowerCase()})),Ra=Ai((function(t,n,r){return t+(r?" ":"")+n.toLowerCase()})),Oa=Si("toLowerCase");var Pa=Ai((function(t,n,r){return t+(r?"_":"")+n.toLowerCase()}));var Ta=Ai((function(t,n,r){return t+(r?" ":"")+Na(n)}));var Ia=Ai((function(t,n,r){return t+(r?" ":"")+n.toUpperCase()})),Na=Si("toUpperCase");function Ya(t,n,r){return t=aa(t),void 0===(n=r?void 0:n)?function(t){return Tt.test(t)}(t)?function(t){return t.match(Ot)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(n)||[]}var Ua=Ie((function(t,n){try{return un(t,void 0,n)}catch(t){return Nu(t)?t:new ht(t)}})),Da=Zi((function(t,n){return sn(n,(function(n){n=Eo(n),Vr(t,n,_u(t[n],t))})),t}));function Wa(t){return function(){return t}}var Za=ki(),Xa=ki(!0);function Ka(t){return t}function Va(t){return Se("function"==typeof t?t:qr(t,1))}var Ha=Ie((function(t,n){return function(r){return _e(r,t,n)}})),$a=Ie((function(t,n){return function(r){return _e(t,r,n)}}));function qa(t,n,r){var e=xa(n),i=fe(n,e);null!=r||Wu(n)&&(i.length||!e.length)||(r=n,n=t,t=this,i=fe(n,xa(n)));var o=!(Wu(r)&&"chain"in r&&!r.chain),u=Yu(t);return sn(i,(function(r){var e=n[r];t[r]=e,u&&(t.prototype[r]=function(){var n=this.__chain__;if(o||n){var r=t(this.__wrapped__),i=r.__actions__=yi(this.__actions__);return i.push({func:e,args:arguments,thisArg:t}),r.__chain__=n,r}return e.apply(t,dn([this.value()],arguments))})})),t}function Ga(){}var Ja=Ci(pn),Qa=Ci(fn),ts=Ci(_n);function ns(t){return so(t)?En(Eo(t)):function(t){return function(n){return le(n,t)}}(t)}var rs=zi(),es=zi(!0);function is(){return[]}function os(){return!1}var us=Bi((function(t,n){return t+n}),0),as=Pi("ceil"),ss=Bi((function(t,n){return t/n}),1),cs=Pi("floor");var fs,ls=Bi((function(t,n){return t*n}),1),hs=Pi("round"),vs=Bi((function(t,n){return t-n}),0);return Mr.after=function(t,n){if("function"!=typeof n)throw new _t(o);return t=ea(t),function(){if(--t<1)return n.apply(this,arguments)}},Mr.ary=gu,Mr.assign=sa,Mr.assignIn=ca,Mr.assignInWith=fa,Mr.assignWith=la,Mr.at=ha,Mr.before=yu,Mr.bind=_u,Mr.bindAll=Da,Mr.bindKey=mu,Mr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return zu(t)?t:[t]},Mr.chain=nu,Mr.chunk=function(t,n,r){n=(r?ao(t,n,r):void 0===n)?1:ur(ea(n),0);var i=null==t?0:t.length;if(!i||n<1)return[];for(var o=0,u=0,a=e(Qn(i/n));o<i;)a[u++]=Xe(t,o,o+=n);return a},Mr.compact=function(t){for(var n=-1,r=null==t?0:t.length,e=0,i=[];++n<r;){var o=t[n];o&&(i[e++]=o)}return i},Mr.concat=function(){var t=arguments.length;if(!t)return[];for(var n=e(t-1),r=arguments[0],i=t;i--;)n[i-1]=arguments[i];return dn(zu(r)?yi(r):[r],oe(n,1))},Mr.cond=function(t){var n=null==t?0:t.length,r=qi();return t=n?pn(t,(function(t){if("function"!=typeof t[1])throw new _t(o);return[r(t[0]),t[1]]})):[],Ie((function(r){for(var e=-1;++e<n;){var i=t[e];if(un(i[0],this,r))return un(i[1],this,r)}}))},Mr.conforms=function(t){return function(t){var n=xa(t);return function(r){return Gr(r,t,n)}}(qr(t,1))},Mr.constant=Wa,Mr.countBy=iu,Mr.create=function(t,n){var r=Fr(t);return null==n?r:Kr(r,n)},Mr.curry=function t(n,r,e){var i=Ni(n,8,void 0,void 0,void 0,void 0,void 0,r=e?void 0:r);return i.placeholder=t.placeholder,i},Mr.curryRight=function t(n,r,e){var i=Ni(n,16,void 0,void 0,void 0,void 0,void 0,r=e?void 0:r);return i.placeholder=t.placeholder,i},Mr.debounce=xu,Mr.defaults=va,Mr.defaultsDeep=pa,Mr.defer=wu,Mr.delay=bu,Mr.difference=Fo,Mr.differenceBy=Bo,Mr.differenceWith=Co,Mr.drop=function(t,n,r){var e=null==t?0:t.length;return e?Xe(t,(n=r||void 0===n?1:ea(n))<0?0:n,e):[]},Mr.dropRight=function(t,n,r){var e=null==t?0:t.length;return e?Xe(t,0,(n=e-(n=r||void 0===n?1:ea(n)))<0?0:n):[]},Mr.dropRightWhile=function(t,n){return t&&t.length?ni(t,qi(n,3),!0,!0):[]},Mr.dropWhile=function(t,n){return t&&t.length?ni(t,qi(n,3),!0):[]},Mr.fill=function(t,n,r,e){var i=null==t?0:t.length;return i?(r&&"number"!=typeof r&&ao(t,n,r)&&(r=0,e=i),function(t,n,r,e){var i=t.length;for((r=ea(r))<0&&(r=-r>i?0:i+r),(e=void 0===e||e>i?i:ea(e))<0&&(e+=i),e=r>e?0:ia(e);r<e;)t[r++]=n;return t}(t,n,r,e)):[]},Mr.filter=function(t,n){return(zu(t)?ln:ie)(t,qi(n,3))},Mr.flatMap=function(t,n){return oe(hu(t,n),1)},Mr.flatMapDeep=function(t,n){return oe(hu(t,n),1/0)},Mr.flatMapDepth=function(t,n,r){return r=void 0===r?1:ea(r),oe(hu(t,n),r)},Mr.flatten=Ro,Mr.flattenDeep=function(t){return(null==t?0:t.length)?oe(t,1/0):[]},Mr.flattenDepth=function(t,n){return(null==t?0:t.length)?oe(t,n=void 0===n?1:ea(n)):[]},Mr.flip=function(t){return Ni(t,512)},Mr.flow=Za,Mr.flowRight=Xa,Mr.fromPairs=function(t){for(var n=-1,r=null==t?0:t.length,e={};++n<r;){var i=t[n];e[i[0]]=i[1]}return e},Mr.functions=function(t){return null==t?[]:fe(t,xa(t))},Mr.functionsIn=function(t){return null==t?[]:fe(t,wa(t))},Mr.groupBy=cu,Mr.initial=function(t){return(null==t?0:t.length)?Xe(t,0,-1):[]},Mr.intersection=Po,Mr.intersectionBy=To,Mr.intersectionWith=Io,Mr.invert=ya,Mr.invertBy=_a,Mr.invokeMap=fu,Mr.iteratee=Va,Mr.keyBy=lu,Mr.keys=xa,Mr.keysIn=wa,Mr.map=hu,Mr.mapKeys=function(t,n){var r={};return n=qi(n,3),se(t,(function(t,e,i){Vr(r,n(t,e,i),t)})),r},Mr.mapValues=function(t,n){var r={};return n=qi(n,3),se(t,(function(t,e,i){Vr(r,e,n(t,e,i))})),r},Mr.matches=function(t){return Me(qr(t,1))},Mr.matchesProperty=function(t,n){return Fe(t,qr(n,1))},Mr.memoize=Su,Mr.merge=ba,Mr.mergeWith=Sa,Mr.method=Ha,Mr.methodOf=$a,Mr.mixin=qa,Mr.negate=Au,Mr.nthArg=function(t){return t=ea(t),Ie((function(n){return Ce(n,t)}))},Mr.omit=Aa,Mr.omitBy=function(t,n){return Ea(t,Au(qi(n)))},Mr.once=function(t){return yu(2,t)},Mr.orderBy=function(t,n,r,e){return null==t?[]:(zu(n)||(n=null==n?[]:[n]),zu(r=e?void 0:r)||(r=null==r?[]:[r]),je(t,n,r))},Mr.over=Ja,Mr.overArgs=Lu,Mr.overEvery=Qa,Mr.overSome=ts,Mr.partial=Eu,Mr.partialRight=ku,Mr.partition=vu,Mr.pick=La,Mr.pickBy=Ea,Mr.property=ns,Mr.propertyOf=function(t){return function(n){return null==t?void 0:le(t,n)}},Mr.pull=Yo,Mr.pullAll=Uo,Mr.pullAllBy=function(t,n,r){return t&&t.length&&n&&n.length?Re(t,n,qi(r,2)):t},Mr.pullAllWith=function(t,n,r){return t&&t.length&&n&&n.length?Re(t,n,void 0,r):t},Mr.pullAt=Do,Mr.range=rs,Mr.rangeRight=es,Mr.rearg=Mu,Mr.reject=function(t,n){return(zu(t)?ln:ie)(t,Au(qi(n,3)))},Mr.remove=function(t,n){var r=[];if(!t||!t.length)return r;var e=-1,i=[],o=t.length;for(n=qi(n,3);++e<o;){var u=t[e];n(u,e,t)&&(r.push(u),i.push(e))}return Oe(t,i),r},Mr.rest=function(t,n){if("function"!=typeof t)throw new _t(o);return Ie(t,n=void 0===n?n:ea(n))},Mr.reverse=Wo,Mr.sampleSize=function(t,n,r){return n=(r?ao(t,n,r):void 0===n)?1:ea(n),(zu(t)?Yr:Ye)(t,n)},Mr.set=function(t,n,r){return null==t?t:Ue(t,n,r)},Mr.setWith=function(t,n,r,e){return e="function"==typeof e?e:void 0,null==t?t:Ue(t,n,r,e)},Mr.shuffle=function(t){return(zu(t)?Ur:Ze)(t)},Mr.slice=function(t,n,r){var e=null==t?0:t.length;return e?(r&&"number"!=typeof r&&ao(t,n,r)?(n=0,r=e):(n=null==n?0:ea(n),r=void 0===r?e:ea(r)),Xe(t,n,r)):[]},Mr.sortBy=pu,Mr.sortedUniq=function(t){return t&&t.length?$e(t):[]},Mr.sortedUniqBy=function(t,n){return t&&t.length?$e(t,qi(n,2)):[]},Mr.split=function(t,n,r){return r&&"number"!=typeof r&&ao(t,n,r)&&(n=r=void 0),(r=void 0===r?4294967295:r>>>0)?(t=aa(t))&&("string"==typeof n||null!=n&&!Hu(n))&&!(n=Ge(n))&&Yn(t)?ci(Vn(t),0,r):t.split(n,r):[]},Mr.spread=function(t,n){if("function"!=typeof t)throw new _t(o);return n=null==n?0:ur(ea(n),0),Ie((function(r){var e=r[n],i=ci(r,0,n);return e&&dn(i,e),un(t,this,i)}))},Mr.tail=function(t){var n=null==t?0:t.length;return n?Xe(t,1,n):[]},Mr.take=function(t,n,r){return t&&t.length?Xe(t,0,(n=r||void 0===n?1:ea(n))<0?0:n):[]},Mr.takeRight=function(t,n,r){var e=null==t?0:t.length;return e?Xe(t,(n=e-(n=r||void 0===n?1:ea(n)))<0?0:n,e):[]},Mr.takeRightWhile=function(t,n){return t&&t.length?ni(t,qi(n,3),!1,!0):[]},Mr.takeWhile=function(t,n){return t&&t.length?ni(t,qi(n,3)):[]},Mr.tap=function(t,n){return n(t),t},Mr.throttle=function(t,n,r){var e=!0,i=!0;if("function"!=typeof t)throw new _t(o);return Wu(r)&&(e="leading"in r?!!r.leading:e,i="trailing"in r?!!r.trailing:i),xu(t,n,{leading:e,maxWait:n,trailing:i})},Mr.thru=ru,Mr.toArray=na,Mr.toPairs=ka,Mr.toPairsIn=Ma,Mr.toPath=function(t){return zu(t)?pn(t,Eo):Gu(t)?[t]:yi(Lo(aa(t)))},Mr.toPlainObject=ua,Mr.transform=function(t,n,r){var e=zu(t),i=e||Tu(t)||Ju(t);if(n=qi(n,4),null==r){var o=t&&t.constructor;r=i?e?new o:[]:Wu(t)&&Yu(o)?Fr(Xt(t)):{}}return(i?sn:se)(t,(function(t,e,i){return n(r,t,e,i)})),r},Mr.unary=function(t){return gu(t,1)},Mr.union=Zo,Mr.unionBy=Xo,Mr.unionWith=Ko,Mr.uniq=function(t){return t&&t.length?Je(t):[]},Mr.uniqBy=function(t,n){return t&&t.length?Je(t,qi(n,2)):[]},Mr.uniqWith=function(t,n){return n="function"==typeof n?n:void 0,t&&t.length?Je(t,void 0,n):[]},Mr.unset=function(t,n){return null==t||Qe(t,n)},Mr.unzip=Vo,Mr.unzipWith=Ho,Mr.update=function(t,n,r){return null==t?t:ti(t,n,ui(r))},Mr.updateWith=function(t,n,r,e){return e="function"==typeof e?e:void 0,null==t?t:ti(t,n,ui(r),e)},Mr.values=Fa,Mr.valuesIn=function(t){return null==t?[]:jn(t,wa(t))},Mr.without=$o,Mr.words=Ya,Mr.wrap=function(t,n){return Eu(ui(n),t)},Mr.xor=qo,Mr.xorBy=Go,Mr.xorWith=Jo,Mr.zip=Qo,Mr.zipObject=function(t,n){return ii(t||[],n||[],Wr)},Mr.zipObjectDeep=function(t,n){return ii(t||[],n||[],Ue)},Mr.zipWith=tu,Mr.entries=ka,Mr.entriesIn=Ma,Mr.extend=ca,Mr.extendWith=fa,qa(Mr,Mr),Mr.add=us,Mr.attempt=Ua,Mr.camelCase=Ba,Mr.capitalize=Ca,Mr.ceil=as,Mr.clamp=function(t,n,r){return void 0===r&&(r=n,n=void 0),void 0!==r&&(r=(r=oa(r))==r?r:0),void 0!==n&&(n=(n=oa(n))==n?n:0),$r(oa(t),n,r)},Mr.clone=function(t){return qr(t,4)},Mr.cloneDeep=function(t){return qr(t,5)},Mr.cloneDeepWith=function(t,n){return qr(t,5,n="function"==typeof n?n:void 0)},Mr.cloneWith=function(t,n){return qr(t,4,n="function"==typeof n?n:void 0)},Mr.conformsTo=function(t,n){return null==n||Gr(t,n,xa(n))},Mr.deburr=ja,Mr.defaultTo=function(t,n){return null==t||t!=t?n:t},Mr.divide=ss,Mr.endsWith=function(t,n,r){t=aa(t),n=Ge(n);var e=t.length,i=r=void 0===r?e:$r(ea(r),0,e);return(r-=n.length)>=0&&t.slice(r,i)==n},Mr.eq=Fu,Mr.escape=function(t){return(t=aa(t))&&N.test(t)?t.replace(T,In):t},Mr.escapeRegExp=function(t){return(t=aa(t))&&V.test(t)?t.replace(K,"\\$&"):t},Mr.every=function(t,n,r){var e=zu(t)?fn:re;return r&&ao(t,n,r)&&(n=void 0),e(t,qi(n,3))},Mr.find=ou,Mr.findIndex=jo,Mr.findKey=function(t,n){return xn(t,qi(n,3),se)},Mr.findLast=uu,Mr.findLastIndex=zo,Mr.findLastKey=function(t,n){return xn(t,qi(n,3),ce)},Mr.floor=cs,Mr.forEach=au,Mr.forEachRight=su,Mr.forIn=function(t,n){return null==t?t:ue(t,qi(n,3),wa)},Mr.forInRight=function(t,n){return null==t?t:ae(t,qi(n,3),wa)},Mr.forOwn=function(t,n){return t&&se(t,qi(n,3))},Mr.forOwnRight=function(t,n){return t&&ce(t,qi(n,3))},Mr.get=da,Mr.gt=Bu,Mr.gte=Cu,Mr.has=function(t,n){return null!=t&&eo(t,n,de)},Mr.hasIn=ga,Mr.head=Oo,Mr.identity=Ka,Mr.includes=function(t,n,r,e){t=Ou(t)?t:Fa(t),r=r&&!e?ea(r):0;var i=t.length;return r<0&&(r=ur(i+r,0)),qu(t)?r<=i&&t.indexOf(n,r)>-1:!!i&&bn(t,n,r)>-1},Mr.indexOf=function(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=null==r?0:ea(r);return i<0&&(i=ur(e+i,0)),bn(t,n,i)},Mr.inRange=function(t,n,r){return n=ra(n),void 0===r?(r=n,n=0):r=ra(r),function(t,n,r){return t>=ar(n,r)&&t<ur(n,r)}(t=oa(t),n,r)},Mr.invoke=ma,Mr.isArguments=ju,Mr.isArray=zu,Mr.isArrayBuffer=Ru,Mr.isArrayLike=Ou,Mr.isArrayLikeObject=Pu,Mr.isBoolean=function(t){return!0===t||!1===t||Zu(t)&&ve(t)==f},Mr.isBuffer=Tu,Mr.isDate=Iu,Mr.isElement=function(t){return Zu(t)&&1===t.nodeType&&!Vu(t)},Mr.isEmpty=function(t){if(null==t)return!0;if(Ou(t)&&(zu(t)||"string"==typeof t||"function"==typeof t.splice||Tu(t)||Ju(t)||ju(t)))return!t.length;var n=ro(t);if(n==d||n==m)return!t.size;if(lo(t))return!Ae(t).length;for(var r in t)if(At.call(t,r))return!1;return!0},Mr.isEqual=function(t,n){return xe(t,n)},Mr.isEqualWith=function(t,n,r){var e=(r="function"==typeof r?r:void 0)?r(t,n):void 0;return void 0===e?xe(t,n,void 0,r):!!e},Mr.isError=Nu,Mr.isFinite=function(t){return"number"==typeof t&&er(t)},Mr.isFunction=Yu,Mr.isInteger=Uu,Mr.isLength=Du,Mr.isMap=Xu,Mr.isMatch=function(t,n){return t===n||we(t,n,Ji(n))},Mr.isMatchWith=function(t,n,r){return r="function"==typeof r?r:void 0,we(t,n,Ji(n),r)},Mr.isNaN=function(t){return Ku(t)&&t!=+t},Mr.isNative=function(t){if(fo(t))throw new ht("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return be(t)},Mr.isNil=function(t){return null==t},Mr.isNull=function(t){return null===t},Mr.isNumber=Ku,Mr.isObject=Wu,Mr.isObjectLike=Zu,Mr.isPlainObject=Vu,Mr.isRegExp=Hu,Mr.isSafeInteger=function(t){return Uu(t)&&t>=-9007199254740991&&t<=9007199254740991},Mr.isSet=$u,Mr.isString=qu,Mr.isSymbol=Gu,Mr.isTypedArray=Ju,Mr.isUndefined=function(t){return void 0===t},Mr.isWeakMap=function(t){return Zu(t)&&ro(t)==b},Mr.isWeakSet=function(t){return Zu(t)&&"[object WeakSet]"==ve(t)},Mr.join=function(t,n){return null==t?"":ir.call(t,n)},Mr.kebabCase=za,Mr.last=No,Mr.lastIndexOf=function(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=e;return void 0!==r&&(i=(i=ea(r))<0?ur(e+i,0):ar(i,e-1)),n==n?function(t,n,r){for(var e=r+1;e--;)if(t[e]===n)return e;return e}(t,n,i):wn(t,An,i,!0)},Mr.lowerCase=Ra,Mr.lowerFirst=Oa,Mr.lt=Qu,Mr.lte=ta,Mr.max=function(t){return t&&t.length?ee(t,Ka,pe):void 0},Mr.maxBy=function(t,n){return t&&t.length?ee(t,qi(n,2),pe):void 0},Mr.mean=function(t){return Ln(t,Ka)},Mr.meanBy=function(t,n){return Ln(t,qi(n,2))},Mr.min=function(t){return t&&t.length?ee(t,Ka,Ee):void 0},Mr.minBy=function(t,n){return t&&t.length?ee(t,qi(n,2),Ee):void 0},Mr.stubArray=is,Mr.stubFalse=os,Mr.stubObject=function(){return{}},Mr.stubString=function(){return""},Mr.stubTrue=function(){return!0},Mr.multiply=ls,Mr.nth=function(t,n){return t&&t.length?Ce(t,ea(n)):void 0},Mr.noConflict=function(){return Vt._===this&&(Vt._=Ft),this},Mr.noop=Ga,Mr.now=du,Mr.pad=function(t,n,r){t=aa(t);var e=(n=ea(n))?Kn(t):0;if(!n||e>=n)return t;var i=(n-e)/2;return ji(tr(i),r)+t+ji(Qn(i),r)},Mr.padEnd=function(t,n,r){t=aa(t);var e=(n=ea(n))?Kn(t):0;return n&&e<n?t+ji(n-e,r):t},Mr.padStart=function(t,n,r){t=aa(t);var e=(n=ea(n))?Kn(t):0;return n&&e<n?ji(n-e,r)+t:t},Mr.parseInt=function(t,n,r){return r||null==n?n=0:n&&(n=+n),cr(aa(t).replace($,""),n||0)},Mr.random=function(t,n,r){if(r&&"boolean"!=typeof r&&ao(t,n,r)&&(n=r=void 0),void 0===r&&("boolean"==typeof n?(r=n,n=void 0):"boolean"==typeof t&&(r=t,t=void 0)),void 0===t&&void 0===n?(t=0,n=1):(t=ra(t),void 0===n?(n=t,t=0):n=ra(n)),t>n){var e=t;t=n,n=e}if(r||t%1||n%1){var i=fr();return ar(t+i*(n-t+Wt("1e-"+((i+"").length-1))),n)}return Pe(t,n)},Mr.reduce=function(t,n,r){var e=zu(t)?gn:Mn,i=arguments.length<3;return e(t,qi(n,4),r,i,te)},Mr.reduceRight=function(t,n,r){var e=zu(t)?yn:Mn,i=arguments.length<3;return e(t,qi(n,4),r,i,ne)},Mr.repeat=function(t,n,r){return n=(r?ao(t,n,r):void 0===n)?1:ea(n),Te(aa(t),n)},Mr.replace=function(){var t=arguments,n=aa(t[0]);return t.length<3?n:n.replace(t[1],t[2])},Mr.result=function(t,n,r){var e=-1,i=(n=ai(n,t)).length;for(i||(i=1,t=void 0);++e<i;){var o=null==t?void 0:t[Eo(n[e])];void 0===o&&(e=i,o=r),t=Yu(o)?o.call(t):o}return t},Mr.round=hs,Mr.runInContext=t,Mr.sample=function(t){return(zu(t)?Nr:Ne)(t)},Mr.size=function(t){if(null==t)return 0;if(Ou(t))return qu(t)?Kn(t):t.length;var n=ro(t);return n==d||n==m?t.size:Ae(t).length},Mr.snakeCase=Pa,Mr.some=function(t,n,r){var e=zu(t)?_n:Ke;return r&&ao(t,n,r)&&(n=void 0),e(t,qi(n,3))},Mr.sortedIndex=function(t,n){return Ve(t,n)},Mr.sortedIndexBy=function(t,n,r){return He(t,n,qi(r,2))},Mr.sortedIndexOf=function(t,n){var r=null==t?0:t.length;if(r){var e=Ve(t,n);if(e<r&&Fu(t[e],n))return e}return-1},Mr.sortedLastIndex=function(t,n){return Ve(t,n,!0)},Mr.sortedLastIndexBy=function(t,n,r){return He(t,n,qi(r,2),!0)},Mr.sortedLastIndexOf=function(t,n){if(null==t?0:t.length){var r=Ve(t,n,!0)-1;if(Fu(t[r],n))return r}return-1},Mr.startCase=Ta,Mr.startsWith=function(t,n,r){return t=aa(t),r=null==r?0:$r(ea(r),0,t.length),n=Ge(n),t.slice(r,r+n.length)==n},Mr.subtract=vs,Mr.sum=function(t){return t&&t.length?Fn(t,Ka):0},Mr.sumBy=function(t,n){return t&&t.length?Fn(t,qi(n,2)):0},Mr.template=function(t,n,r){var e=Mr.templateSettings;r&&ao(t,n,r)&&(n=void 0),t=aa(t),n=fa({},n,e,Yi);var i,o,u=fa({},n.imports,e.imports,Yi),a=xa(u),s=jn(u,a),c=0,f=n.interpolate||ft,l="__p += '",h=gt((n.escape||ft).source+"|"+f.source+"|"+(f===D?rt:ft).source+"|"+(n.evaluate||ft).source+"|$","g"),v="//# sourceURL="+(At.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Nt+"]")+"\n";t.replace(h,(function(n,r,e,u,a,s){return e||(e=u),l+=t.slice(c,s).replace(lt,Nn),r&&(i=!0,l+="' +\n__e("+r+") +\n'"),a&&(o=!0,l+="';\n"+a+";\n__p += '"),e&&(l+="' +\n((__t = ("+e+")) == null ? '' : __t) +\n'"),c=s+n.length,n})),l+="';\n";var p=At.call(n,"variable")&&n.variable;p||(l="with (obj) {\n"+l+"\n}\n"),l=(o?l.replace(z,""):l).replace(R,"$1").replace(O,"$1;"),l="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var d=Ua((function(){return vt(a,v+"return "+l).apply(void 0,s)}));if(d.source=l,Nu(d))throw d;return d},Mr.times=function(t,n){if((t=ea(t))<1||t>9007199254740991)return[];var r=4294967295,e=ar(t,4294967295);t-=4294967295;for(var i=Bn(e,n=qi(n));++r<t;)n(r);return i},Mr.toFinite=ra,Mr.toInteger=ea,Mr.toLength=ia,Mr.toLower=function(t){return aa(t).toLowerCase()},Mr.toNumber=oa,Mr.toSafeInteger=function(t){return t?$r(ea(t),-9007199254740991,9007199254740991):0===t?t:0},Mr.toString=aa,Mr.toUpper=function(t){return aa(t).toUpperCase()},Mr.trim=function(t,n,r){if((t=aa(t))&&(r||void 0===n))return t.replace(H,"");if(!t||!(n=Ge(n)))return t;var e=Vn(t),i=Vn(n);return ci(e,Rn(e,i),On(e,i)+1).join("")},Mr.trimEnd=function(t,n,r){if((t=aa(t))&&(r||void 0===n))return t.replace(q,"");if(!t||!(n=Ge(n)))return t;var e=Vn(t);return ci(e,0,On(e,Vn(n))+1).join("")},Mr.trimStart=function(t,n,r){if((t=aa(t))&&(r||void 0===n))return t.replace($,"");if(!t||!(n=Ge(n)))return t;var e=Vn(t);return ci(e,Rn(e,Vn(n))).join("")},Mr.truncate=function(t,n){var r=30,e="...";if(Wu(n)){var i="separator"in n?n.separator:i;r="length"in n?ea(n.length):r,e="omission"in n?Ge(n.omission):e}var o=(t=aa(t)).length;if(Yn(t)){var u=Vn(t);o=u.length}if(r>=o)return t;var a=r-Kn(e);if(a<1)return e;var s=u?ci(u,0,a).join(""):t.slice(0,a);if(void 0===i)return s+e;if(u&&(a+=s.length-a),Hu(i)){if(t.slice(a).search(i)){var c,f=s;for(i.global||(i=gt(i.source,aa(et.exec(i))+"g")),i.lastIndex=0;c=i.exec(f);)var l=c.index;s=s.slice(0,void 0===l?a:l)}}else if(t.indexOf(Ge(i),a)!=a){var h=s.lastIndexOf(i);h>-1&&(s=s.slice(0,h))}return s+e},Mr.unescape=function(t){return(t=aa(t))&&I.test(t)?t.replace(P,Hn):t},Mr.uniqueId=function(t){var n=++Lt;return aa(t)+n},Mr.upperCase=Ia,Mr.upperFirst=Na,Mr.each=au,Mr.eachRight=su,Mr.first=Oo,qa(Mr,(fs={},se(Mr,(function(t,n){At.call(Mr.prototype,n)||(fs[n]=t)})),fs),{chain:!1}),Mr.VERSION="4.17.19",sn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Mr[t].placeholder=Mr})),sn(["drop","take"],(function(t,n){jr.prototype[t]=function(r){r=void 0===r?1:ur(ea(r),0);var e=this.__filtered__&&!n?new jr(this):this.clone();return e.__filtered__?e.__takeCount__=ar(r,e.__takeCount__):e.__views__.push({size:ar(r,4294967295),type:t+(e.__dir__<0?"Right":"")}),e},jr.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),sn(["filter","map","takeWhile"],(function(t,n){var r=n+1,e=1==r||3==r;jr.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:qi(t,3),type:r}),n.__filtered__=n.__filtered__||e,n}})),sn(["head","last"],(function(t,n){var r="take"+(n?"Right":"");jr.prototype[t]=function(){return this[r](1).value()[0]}})),sn(["initial","tail"],(function(t,n){var r="drop"+(n?"":"Right");jr.prototype[t]=function(){return this.__filtered__?new jr(this):this[r](1)}})),jr.prototype.compact=function(){return this.filter(Ka)},jr.prototype.find=function(t){return this.filter(t).head()},jr.prototype.findLast=function(t){return this.reverse().find(t)},jr.prototype.invokeMap=Ie((function(t,n){return"function"==typeof t?new jr(this):this.map((function(r){return _e(r,t,n)}))})),jr.prototype.reject=function(t){return this.filter(Au(qi(t)))},jr.prototype.slice=function(t,n){t=ea(t);var r=this;return r.__filtered__&&(t>0||n<0)?new jr(r):(t<0?r=r.takeRight(-t):t&&(r=r.drop(t)),void 0!==n&&(r=(n=ea(n))<0?r.dropRight(-n):r.take(n-t)),r)},jr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},jr.prototype.toArray=function(){return this.take(4294967295)},se(jr.prototype,(function(t,n){var r=/^(?:filter|find|map|reject)|While$/.test(n),e=/^(?:head|last)$/.test(n),i=Mr[e?"take"+("last"==n?"Right":""):n],o=e||/^find/.test(n);i&&(Mr.prototype[n]=function(){var n=this.__wrapped__,u=e?[1]:arguments,a=n instanceof jr,s=u[0],c=a||zu(n),f=function(t){var n=i.apply(Mr,dn([t],u));return e&&l?n[0]:n};c&&r&&"function"==typeof s&&1!=s.length&&(a=c=!1);var l=this.__chain__,h=!!this.__actions__.length,v=o&&!l,p=a&&!h;if(!o&&c){n=p?n:new jr(this);var d=t.apply(n,u);return d.__actions__.push({func:ru,args:[f],thisArg:void 0}),new Cr(d,l)}return v&&p?t.apply(this,u):(d=this.thru(f),v?e?d.value()[0]:d.value():d)})})),sn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=mt[t],r=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",e=/^(?:pop|shift)$/.test(t);Mr.prototype[t]=function(){var t=arguments;if(e&&!this.__chain__){var i=this.value();return n.apply(zu(i)?i:[],t)}return this[r]((function(r){return n.apply(zu(r)?r:[],t)}))}})),se(jr.prototype,(function(t,n){var r=Mr[n];if(r){var e=r.name+"";At.call(mr,e)||(mr[e]=[]),mr[e].push({name:n,func:r})}})),mr[Mi(void 0,2).name]=[{name:"wrapper",func:void 0}],jr.prototype.clone=function(){var t=new jr(this.__wrapped__);return t.__actions__=yi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=yi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=yi(this.__views__),t},jr.prototype.reverse=function(){if(this.__filtered__){var t=new jr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},jr.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,r=zu(t),e=n<0,i=r?t.length:0,o=function(t,n,r){var e=-1,i=r.length;for(;++e<i;){var o=r[e],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":n-=u;break;case"take":n=ar(n,t+u);break;case"takeRight":t=ur(t,n-u)}}return{start:t,end:n}}(0,i,this.__views__),u=o.start,a=o.end,s=a-u,c=e?a:u-1,f=this.__iteratees__,l=f.length,h=0,v=ar(s,this.__takeCount__);if(!r||!e&&i==s&&v==s)return ri(t,this.__actions__);var p=[];t:for(;s--&&h<v;){for(var d=-1,g=t[c+=n];++d<l;){var y=f[d],_=y.iteratee,m=y.type,x=_(g);if(2==m)g=x;else if(!x){if(1==m)continue t;break t}}p[h++]=g}return p},Mr.prototype.at=eu,Mr.prototype.chain=function(){return nu(this)},Mr.prototype.commit=function(){return new Cr(this.value(),this.__chain__)},Mr.prototype.next=function(){void 0===this.__values__&&(this.__values__=na(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Mr.prototype.plant=function(t){for(var n,r=this;r instanceof Br;){var e=Mo(r);e.__index__=0,e.__values__=void 0,n?i.__wrapped__=e:n=e;var i=e;r=r.__wrapped__}return i.__wrapped__=t,n},Mr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof jr){var n=t;return this.__actions__.length&&(n=new jr(this)),(n=n.reverse()).__actions__.push({func:ru,args:[Wo],thisArg:void 0}),new Cr(n,this.__chain__)}return this.thru(Wo)},Mr.prototype.toJSON=Mr.prototype.valueOf=Mr.prototype.value=function(){return ri(this.__wrapped__,this.__actions__)},Mr.prototype.first=Mr.prototype.head,Jt&&(Mr.prototype[Jt]=function(){return this}),Mr}();Vt._=$n,void 0===(i=function(){return $n}.call(n,r,n,e))||(e.exports=i)}).call(this)}).call(this,r(8),r(9)(t))},function(t,n){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n,r){"use strict";r.r(n),r.d(n,"Glify",(function(){return E})),r.d(n,"glify",(function(){return k}));var e=r(0);class i{constructor(){this.array=new Float32Array(16)}setSize(t,n){return this.array.set([2/t,0,0,0,0,-2/n,0,0,0,0,0,0,-1,1,0,1]),this}translateTo(t,n){const{array:r}=this;return r[12]=r[0]*t-1,r[13]=r[5]*n+1,this}scaleTo(t){const{array:n}=this;return n[0]*=t,n[5]*=t,this}}class o extends e.Layer{constructor(t,n){super(),this._userDrawFunc=t,this._frame=null,this._redrawCallbacks=[],this._pane=n}drawing(t){return this._userDrawFunc=t,this}params(t){return e.Util.setOptions(this,t),this}redraw(t){return"function"==typeof t&&this._redrawCallbacks.push(t),null===this._frame&&(this._frame=e.Util.requestAnimFrame(this._redraw,this)),this}isAnimated(){return Boolean(this._map.options.zoomAnimation&&e.Browser.any3d)}onAdd(t){var n;this._map=t;const r=this.canvas=null!==(n=this.canvas)&&void 0!==n?n:document.createElement("canvas"),i=t.getSize(),o=this.isAnimated();r.width=i.x,r.height=i.y,r.className="leaflet-zoom-"+(o?"animated":"hide");const u=t.getPane(this._pane);if(!u)throw new Error("unable to find pane");return u.appendChild(this.canvas),t.on("moveend",this._reset,this),t.on("resize",this._resize,this),o&&t.on("zoomanim",e.Layer?this._animateZoom:this._animateZoomNoLayer,this),this._reset(),this}onRemove(t){if(this.canvas){const n=t.getPane(this._pane);if(!n)throw new Error("unable to find pane");n.removeChild(this.canvas)}return t.off("moveend",this._reset,this),t.off("resize",this._resize,this),this.isAnimated()&&t.off("zoomanim",e.Layer?this._animateZoom:this._animateZoomNoLayer,this),this}addTo(t){return t.addLayer(this),this}get map(){return this._map}set map(t){this._map=t}_resize(t){this.canvas&&(this.canvas.width=t.newSize.x,this.canvas.height=t.newSize.y)}_reset(){if(this.canvas){const t=this._map.containerPointToLayerPoint([0,0]);e.DomUtil.setPosition(this.canvas,t)}this._redraw()}_redraw(){const{_map:t,canvas:n}=this,r=t.getSize(),i=t.getBounds(),o=180*r.x/(20037508.34*(i.getEast()-i.getWest())),u=t.getZoom(),a=new e.LatLng(i.getNorth(),i.getWest()),s=this._unclampedProject(a,0);for(n&&this._userDrawFunc({bounds:i,canvas:n,offset:s,scale:Math.pow(2,u),size:r,zoomScale:o,zoom:u});this._redrawCallbacks.length>0;){const t=this._redrawCallbacks.shift();t&&t(this)}this._frame=null}_animateZoom(t){const{_map:n,canvas:r}=this,i=n.getZoomScale(t.zoom,n.getZoom()),o=this._unclampedLatLngBoundsToNewLayerBounds(n.getBounds(),t.zoom,t.center).min;r&&o&&e.DomUtil.setTransform(r,o,i)}_animateZoomNoLayer(t){const{_map:n,canvas:r}=this;if(r){const i=n.getZoomScale(t.zoom,n.getZoom()),o=n._getCenterOffset(t.center)._multiplyBy(-i).subtract(n._getMapPanePos());e.DomUtil.setTransform(r,o,i)}}_unclampedProject(t,n){var r;const{crs:i}=this._map.options,{R:o}=i.projection,u=Math.PI/180,a=t.lat,s=Math.sin(a*u),c=new e.Point(o*t.lng*u,o*Math.log((1+s)/(1-s))/2),f=null!==(r=null==i?void 0:i.scale(n))&&void 0!==r?r:0;return i.transformation._transform(c,f)}_unclampedLatLngBoundsToNewLayerBounds(t,n,r){const i=this._map._getNewPixelOrigin(r,n);return new e.Bounds([this._unclampedProject(t.getSouthWest(),n).subtract(i),this._unclampedProject(t.getNorthWest(),n).subtract(i),this._unclampedProject(t.getSouthEast(),n).subtract(i),this._unclampedProject(t.getNorthEast(),n).subtract(i)])}}const u={pane:"overlayPane"};class a{constructor(t){var n,r;this.bytes=0,this.buffers={},this.attributeLocations={},this.uniformLocations={},this.settings={...u,...t},this.mapMatrix=new i,this.active=!0,this.vertexShader=null,this.fragmentShader=null,this.program=null,this.matrix=null,this.vertices=null,this.vertexLines=null;const e=Boolean(t.preserveDrawingBuffer),a=this.layer=new o(t=>this.drawOnCanvas(t),this.pane).addTo(this.map);if(!a.canvas)throw new Error("layer.canvas not correctly defined");const s=this.canvas=a.canvas;s.width=s.clientWidth,s.height=s.clientHeight,s.style.position="absolute",this.className&&(s.className+=" "+this.className),this.gl=null!==(r=null!==(n=s.getContext("webgl2",{preserveDrawingBuffer:e}))&&void 0!==n?n:s.getContext("webgl",{preserveDrawingBuffer:e}))&&void 0!==r?r:s.getContext("experimental-webgl",{preserveDrawingBuffer:e})}get data(){if(!this.settings.data)throw new Error("data not defined");return this.settings.data}get pane(){var t;return null!==(t=this.settings.pane)&&void 0!==t?t:"overlayPane"}get className(){var t;return null!==(t=this.settings.className)&&void 0!==t?t:""}get map(){if(!this.settings.map)throw new Error("settings.map not defined");return this.settings.map}get sensitivity(){if("number"!=typeof this.settings.sensitivity)throw new Error("settings.sensitivity not correctly defined");return this.settings.sensitivity}get sensitivityHover(){if("number"!=typeof this.settings.sensitivityHover)throw new Error("settings.sensitivityHover not correctly defined");return this.settings.sensitivityHover}get hoverWait(){var t;return null!==(t=this.settings.hoverWait)&&void 0!==t?t:250}get longitudeKey(){if("number"!=typeof this.settings.longitudeKey)throw new Error("settings.longitudeKey not correctly defined");return this.settings.longitudeKey}get latitudeKey(){if("number"!=typeof this.settings.latitudeKey)throw new Error("settings.latitudeKey not correctly defined");return this.settings.latitudeKey}get opacity(){if("number"!=typeof this.settings.opacity)throw new Error("settings.opacity not correctly defined");return this.settings.opacity}get color(){var t;return null!==(t=this.settings.color)&&void 0!==t?t:null}attachShaderVariables(t){if(0===this.getShaderVariableCount())return this;const{gl:n,settings:r}=this,{shaderVariables:e}=r;let i=0;for(const r in e){if(!e.hasOwnProperty(r))continue;const o=e[r],u=this.getAttributeLocation(r);if(u<0)throw new Error("shader variable "+r+" not found");n.vertexAttribPointer(u,o.size,n[o.type],!!o.normalize,this.bytes*t,i*t),i+=o.size,n.enableVertexAttribArray(u)}return this}getShaderVariableCount(){var t;return Object.keys(null!==(t=this.settings.shaderVariables)&&void 0!==t?t:{}).length}setData(t){return this.settings={...this.settings,data:t},this.render()}setup(){const t=this.settings;return t.click&&t.setupClick&&t.setupClick(this.map),t.hover&&t.setupHover&&t.setupHover(this.map,this.hoverWait),this.setupVertexShader().setupFragmentShader().setupProgram()}setupVertexShader(){const{gl:t,settings:n}=this,r="function"==typeof n.vertexShaderSource?n.vertexShaderSource():n.vertexShaderSource,e=t.createShader(t.VERTEX_SHADER);if(!e)throw new Error("Not able to create vertex");if(!r)throw new Error("vertexShaderSource not set");return t.shaderSource(e,r),t.compileShader(e),this.vertexShader=e,this}setupFragmentShader(){const t=this.gl,n=this.settings,r="function"==typeof n.fragmentShaderSource?n.fragmentShaderSource():n.fragmentShaderSource,e=t.createShader(t.FRAGMENT_SHADER);if(!e)throw new Error("Not able to create fragment");if(!r)throw new Error("fragmentShaderSource not set");return t.shaderSource(e,r),t.compileShader(e),this.fragmentShader=e,this}setupProgram(){const{gl:t,vertexShader:n,fragmentShader:r}=this,e=t.createProgram();if(!e)throw new Error("Not able to create program");if(!n)throw new Error("this.vertexShader not correctly set");if(!r)throw new Error("this.fragmentShader not correctly set");return t.attachShader(e,n),t.attachShader(e,r),t.linkProgram(e),t.useProgram(e),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.enable(t.BLEND),this.program=e,this}addTo(t){return this.layer.addTo(null!=t?t:this.map),this.active=!0,this.render()}remove(t){if(void 0===t)this.map.removeLayer(this.layer),this.active=!1;else{const n=this.settings.data.features||this.settings.data;"number"==typeof(t=t instanceof Array?t:[t])&&(t=[t]),t.sort((t,n)=>t-n).reverse().forEach(t=>{n.splice(t,1)}),this.render()}return this}insert(t,n){return(this.settings.data.features||this.settings.data).splice(n,0,t),this.render()}update(t,n){return(this.settings.data.features||this.settings.data)[n]=t,this.render()}getBuffer(t){if(!this.buffers[t]){const n=this.gl.createBuffer();if(!n)throw new Error("Not able to create buffer");this.buffers[t]=n}return this.buffers[t]}getAttributeLocation(t){if(!this.program)throw new Error("Program is missing");return void 0!==this.attributeLocations[t]?this.attributeLocations[t]:this.attributeLocations[t]=this.gl.getAttribLocation(this.program,t)}getUniformLocation(t){if(!this.program)throw new Error("Program is missing");if(void 0!==this.uniformLocations[t])return this.uniformLocations[t];const n=this.gl.getUniformLocation(this.program,t);if(!n)throw new Error("Cannot find location");return this.uniformLocations[t]=n}click(t,n){if(!this.settings.click)return;const r=this.settings.click(t,n);return void 0!==r?r:void 0}hover(t,n){if(!this.settings.hover)return;const r=this.settings.hover(t,n);return void 0!==r?r:void 0}hoverOff(t,n){this.settings.hoverOff&&this.settings.hoverOff(t,n)}}a.defaults=u;function s(){return{r:Math.random(),g:Math.random(),b:Math.random(),a:Math.random()}}class c{constructor(t){this.pixels=[],this.latLngs=[],this.settings=t,this.vertexCount=0,this.array=[]}get length(){return this.array.length}fillFromCoordinates(t){var n;const{color:r,opacity:i,project:o,latitudeKey:u,longitudeKey:a}=this.settings;for(let s=0;s<t.length;s++){if(Array.isArray(t[s][0])){this.fillFromCoordinates(t[s]);continue}const c=t,f=new e.LatLng(c[s][u],c[s][a]);this.latLngs.push(f);const l=o(f,0);this.pixels.push(l),this.push(l.x,l.y,r.r,r.g,r.b,null!==(n=r.a)&&void 0!==n?n:i),0!==s&&s!==t.length-1&&(this.vertexCount+=1),this.vertexCount+=1}}push(...t){this.array.push(...t)}}function f(t,n){const r=Math.PI/180,e=4*Math.PI,i=Math.sin(t*r);return{x:(n+180)/360*256,y:256*(.5-Math.log((1+i)/(1-i))/e)}}function l(t,n,r){return(t.x-n.x)*(t.x-n.x)+(t.y-n.y)*(t.y-n.y)<=r*r}function h(t,n,r,e,i,o){const u=i-r,a=o-e,s=u*u+a*a;let c,f,l=-1;0!==s&&(l=((t-r)*u+(n-e)*a)/s),l<0?(c=r,f=e):l>1?(c=i,f=o):(c=r+l*u,f=e+l*a);const h=t-c,v=n-f;return Math.sqrt(h*h+v*v)}function v(t,n,r){const e=r.latLngToLayerPoint(t),i=r.latLngToLayerPoint(n);return function(t,n){return Math.sqrt(t*t+n*n)}(e.x-i.x,e.y-i.y)}const p={data:{type:"FeatureCollection",features:[]},color:s,className:"",opacity:.5,weight:2,sensitivity:.1,sensitivityHover:.03,shaderVariables:{vertex:{type:"FLOAT",start:0,size:2},color:{type:"FLOAT",start:2,size:4}}};class d extends a{constructor(t){if(super(t),this.scale=1/0,this.bytes=6,this.allVertices=[],this.allVerticesTyped=new Float32Array(0),this.vertices=[],this.aPointSize=-1,this.hoveringFeatures=[],this.settings={...d.defaults,...t},!t.data)throw new Error('"data" is missing');this.active=!0,this.setup().render()}get weight(){if(!this.settings.weight)throw new Error("settings.weight not correctly defined");return this.settings.weight}render(){this.resetVertices();const{canvas:t,gl:n,layer:r,mapMatrix:e}=this,i=this.getBuffer("vertex");n.bindBuffer(n.ARRAY_BUFFER,i);const o=this.allVerticesTyped.BYTES_PER_ELEMENT;n.bufferData(n.ARRAY_BUFFER,this.allVerticesTyped,n.STATIC_DRAW);const u=this.getAttributeLocation("vertex");return n.vertexAttribPointer(u,2,n.FLOAT,!1,o*this.bytes,0),n.enableVertexAttribArray(u),this.matrix=this.getUniformLocation("matrix"),this.aPointSize=this.getAttributeLocation("pointSize"),e.setSize(t.width,t.height),n.viewport(0,0,t.width,t.height),n.uniformMatrix4fv(this.matrix,!1,e.array),this.attachShaderVariables(o),r.redraw(),this}resetVertices(){const{map:t,opacity:n,color:r,weight:e,latitudeKey:i,longitudeKey:o,data:u,bytes:a,settings:s}=this,{eachVertex:f}=s,{features:l}=u,h=l.length;let v,p,d=null,g=null,y=0;"function"==typeof r&&(d=r),"function"==typeof e&&(g=e);const _=t.project.bind(t),m=[];for(;y<h;y++){v=l[y],p=d?d(y,v):r;const t=g?g(y,v):e,u=new c({project:_,latitudeKey:i,longitudeKey:o,color:p,weight:t,opacity:n});u.fillFromCoordinates(v.geometry.coordinates),m.push(u),f&&f(u)}const x=m.length,w=[];for(let t=0;t<x;t++){const n=m[t].array,r=n.length/a;for(let t=0;t<r;t++){const e=t*a;0!==t&&t!==r-1&&w.push(n[e],n[e+1],n[e+2],n[e+3],n[e+4],n[e+5]),w.push(n[e],n[e+1],n[e+2],n[e+3],n[e+4],n[e+5])}}return this.vertices=m,this.allVertices=w,this.allVerticesTyped=new Float32Array(w),this}drawOnCanvas(t){if(!this.gl)return this;const{gl:n,data:r,canvas:e,mapMatrix:i,matrix:o,allVertices:u,vertices:a,weight:s,aPointSize:c,bytes:f}=this,{scale:l,offset:h,zoom:v}=t;this.scale=l;const p=Math.max(v-4,4);if(n.clear(n.COLOR_BUFFER_BIT),n.viewport(0,0,e.width,e.height),n.vertexAttrib1f(c,p),i.setSize(e.width,e.height).scaleTo(l),v>18)i.translateTo(-h.x,-h.y),n.uniformMatrix4fv(o,!1,i.array),n.drawArrays(n.LINES,0,u.length/f);else if("number"==typeof s)for(let t=-s;t<=s;t+=.5)for(let r=-s;r<=s;r+=.5)i.translateTo(-h.x+r/l,-h.y+t/l),n.uniformMatrix4fv(o,!1,i.array),n.drawArrays(n.LINES,0,u.length/f);else if("function"==typeof s){let t=0;const{features:e}=r;for(let r=0;r<a.length;r++){const o=a[r],{vertexCount:u}=o,c=s(r,e[r]);for(let r=-c;r<=c;r+=.5)for(let e=-c;e<=c;e+=.5)i.translateTo(-h.x+e/l,-h.y+r/l),n.uniformMatrix4fv(this.matrix,!1,i.array),n.drawArrays(n.LINES,t,u);t+=u}}return this}static tryClick(t,n,r){let e=null,i=null;if(r.forEach(r=>{const{latitudeKey:o,longitudeKey:u,sensitivity:a,weight:s,scale:c,active:f}=r;function l(n,s,f,l){h(t.latlng.lng,t.latlng.lat,s[u],s[o],n[u],n[o])<=a+l/c&&(e=f,i=r)}f&&r.map===n&&r.data.features.forEach((t,n)=>{const r="function"==typeof s?s(n,t):s,{coordinates:e,type:i}=t.geometry;if("LineString"===i)for(let n=1;n<e.length;n++)l(e[n],e[n-1],t,r);else if("MultiLineString"===i)for(let n=0;n<e.length;n++){const i=e[n];for(let o=0;o<i.length;o++)if(0===o&&n>0){const i=e[n-1];l(i[i.length-1],e[n][o],t,r)}else o>0&&l(e[n][o],e[n][o-1],t,r)}})}),i&&e){const n=i.click(t,e);return void 0!==n?n:void 0}}static tryHover(t,n,r){const i=[];return r.forEach(r=>{const{sensitivityHover:o,latitudeKey:u,longitudeKey:a,data:s,hoveringFeatures:c,weight:f,scale:l}=r;function v(n,r,e,i){return h(t.latlng.lng,t.latlng.lat,r[a],r[u],n[a],n[u])<=o+i/l&&(d.includes(e)||d.push(e),!p.includes(e))}if(!r.active)return;if(n!==r.map)return;const p=c,d=[];r.hoveringFeatures=d;const g=Object(e.geoJSON)(s.features).getBounds();(function(t,n){const r=n.getNorthEast(),e=n.getSouthWest();return r.lat>t.lat&&t.lat>e.lat&&r.lng>t.lng&&t.lng>e.lng})(t.latlng,g)&&s.features.forEach((n,e)=>{const o="function"==typeof f?f(e,n):f,{coordinates:u,type:a}=n.geometry;let s=!1;if("LineString"===a)for(let t=1;t<u.length&&(s=v(u[t],u[t-1],n,o),!s);t++);else if("MultiLineString"===a)for(let t=0;t<u.length;t++){const r=u[t];for(let e=0;e<r.length;e++)if(0===e&&t>0){const r=u[t-1];if(s=v(r[r.length-1],u[t][e],n,o),s)break}else if(e>0&&(s=v(u[t][e],u[t][e-1],n,o),s))break}if(s){const e=r.hover(t,n);void 0!==e&&i.push(e)}});for(let n=0;n<p.length;n++){const e=p[n];d.includes(e)||r.hoverOff(t,e)}}),i}}d.defaults=p;const g={color:s,opacity:.8,className:"",sensitivity:2,sensitivityHover:.03,shaderVariables:{vertex:{type:"FLOAT",start:0,size:2},color:{type:"FLOAT",start:2,size:4},pointSize:{type:"FLOAT",start:6,size:1}}};class y extends a{constructor(t){var n;super(t),this.bytes=7,this.latLngLookup={},this.allLatLngLookup=[],this.vertices=[],this.typedVertices=new Float32Array,this.settings={...g,...t},this.active=!0;const{data:r,map:e}=this;if(Array.isArray(r))this.dataFormat="Array";else{if("FeatureCollection"!==r.type)throw new Error("unhandled data type. Supported types are Array and GeoJson.FeatureCollection");this.dataFormat="GeoJson.FeatureCollection"}"EPSG:3857"!==(null===(n=e.options.crs)||void 0===n?void 0:n.code)&&console.warn("layer designed for SphericalMercator, alternate detected"),this.setup().render()}get size(){return"number"==typeof this.settings.size||"function"==typeof this.settings.size?this.settings.size:null}render(){this.resetVertices();const{gl:t,canvas:n,layer:r,vertices:e,mapMatrix:i}=this,o=this.matrix=this.getUniformLocation("matrix"),u=this.getBuffer("vertices"),a=this.typedVertices=new Float32Array(e),s=a.BYTES_PER_ELEMENT;return i.setSize(n.width,n.height),t.viewport(0,0,n.width,n.height),t.uniformMatrix4fv(o,!1,i.array),t.bindBuffer(t.ARRAY_BUFFER,u),t.bufferData(t.ARRAY_BUFFER,a,t.STATIC_DRAW),this.attachShaderVariables(s),r.redraw(),this}getPointLookup(t){return this.latLngLookup[t]||(this.latLngLookup[t]=[])}addLookup(t){return this.getPointLookup(t.key).push(t),this.allLatLngLookup.push(t),this}resetVertices(){var t,n,r,i,o,u;this.latLngLookup={},this.allLatLngLookup=[],this.vertices=[];const{vertices:a,settings:s,map:c,size:f,latitudeKey:l,longitudeKey:h,color:v,opacity:p,data:d}=this,{eachVertex:g}=s;let y,_,m,x,w,b,S,A=null;if(!v)throw new Error("color is not properly defined");if("function"==typeof v&&(A=v),!f)throw new Error("size is not properly defined");if("function"==typeof f&&(m=f),"Array"===this.dataFormat){const i=d.length;for(let o=0;o<i;o++){x=d[o],S=x[l].toFixed(2)+"x"+x[h].toFixed(2),w=new e.LatLng(x[l],x[h]),b=c.project(w,0),y=A?A(o,w):v,y={...y,a:null!==(n=null!==(t=y.a)&&void 0!==t?t:p)&&void 0!==n?n:0},_=m?m(o,w):f,a.push(b.x,b.y,y.r,y.g,y.b,null!==(r=y.a)&&void 0!==r?r:0,_);const i={latLng:w,key:S,pixel:b,chosenColor:y,chosenSize:_,feature:x};this.addLookup(i),g&&g(i)}}else if("GeoJson.FeatureCollection"===this.dataFormat){const t=d.features.length;for(let n=0;n<t;n++){const t=d.features[n];x=t.geometry.coordinates,S=x[l].toFixed(2)+"x"+x[h].toFixed(2),w=new e.LatLng(x[l],x[h]),b=c.project(w,0),y=A?A(n,t):v,y={...y,a:null!==(o=null!==(i=y.a)&&void 0!==i?i:p)&&void 0!==o?o:0},_=m?m(n,w):f,a.push(b.x,b.y,y.r,y.g,y.b,null!==(u=y.a)&&void 0!==u?u:0,_);const r={latLng:w,key:S,pixel:b,chosenColor:y,chosenSize:_,feature:t};this.addLookup(r),g&&g(r)}}return this}pointSize(t){const{map:n,size:r}=this,e="function"==typeof r?r(t,null):r,i=n.getZoom();return null===e?Math.max(i-4,1):e}drawOnCanvas(t){if(!this.gl)return this;const{gl:n,canvas:r,mapMatrix:e,matrix:i,map:o,allLatLngLookup:u}=this,{offset:a}=t,s=o.getZoom(),c=Math.pow(2,s);return e.setSize(r.width,r.height).scaleTo(c).translateTo(-a.x,-a.y),n.clear(n.COLOR_BUFFER_BIT),n.viewport(0,0,r.width,r.height),n.uniformMatrix4fv(i,!1,e.array),n.drawArrays(n.POINTS,0,u.length),this}lookup(t){const n=t.lat+.03,r=t.lng+.03,e=[];let i,o,u,a,s,c=t.lat-.03;for(;c<=n;c+=.01)for(i=t.lng-.03;i<=r;i+=.01)if(s=c.toFixed(2)+"x"+i.toFixed(2),a=this.latLngLookup[s],a)for(o=0,u=a.length;o<u;o++)e.push(a[o]);const{map:f}=this;return y.closest(t,e.length>0?e:this.allLatLngLookup,f)}static closest(t,n,r){return n.length<1?null:n.reduce((n,e)=>v(t,n.latLng,r)<v(t,e.latLng,r)?n:e)}static tryClick(t,n,r){const e=[],i={};let o,u,a=null;if(r.forEach(r=>{a=r.settings,r.active&&r.map===n&&(u=r.lookup(t.latlng),null!==u&&(i[u.key]=r,e.push(u)))}),e.length<1)return;if(!a)return;const s=this.closest(t.latlng,e,n);if(!s)return;const c=i[s.key];if(!c)return;const{sensitivity:f}=c,h=s.latLng;return l(n.latLngToLayerPoint(h),t.layerPoint,s.chosenSize*(null!=f?f:1))?(o=c.click(t,s.feature||s.latLng),void 0===o||o):void 0}static tryHover(t,n,r){const e=[];return r.forEach(r=>{if(!r.active)return;if(r.map!==n)return;const i=r.lookup(t.latlng);if(i&&l(n.latLngToLayerPoint(i.latLng),t.layerPoint,i.chosenSize*r.sensitivityHover*30)){const n=r.hover(t,i.feature||i.latLng);void 0!==n&&e.push(n)}}),e}}y.defaults=g,y.maps=[];var _=r(1),m=r.n(_),x=r(2),w=r.n(x);function b(t){switch(t&&t.type||null){case"FeatureCollection":return t.features=t.features.reduce((function(t,n){return t.concat(b(n))}),[]),t;case"Feature":return t.geometry?b(t.geometry).map((function(n){var r={type:"Feature",properties:JSON.parse(JSON.stringify(t.properties)),geometry:n};return void 0!==t.id&&(r.id=t.id),r})):[t];case"MultiPoint":return t.coordinates.map((function(t){return{type:"Point",coordinates:t}}));case"MultiPolygon":return t.coordinates.map((function(t){return{type:"Polygon",coordinates:t}}));case"MultiLineString":return t.coordinates.map((function(t){return{type:"LineString",coordinates:t}}));case"GeometryCollection":return t.geometries.map(b).reduce((function(t,n){return t.concat(n)}),[]);case"Point":case"Polygon":case"LineString":return[t]}}const S={data:[],color:s,className:"",opacity:.5,shaderVariables:{vertex:{type:"FLOAT",start:0,size:2},color:{type:"FLOAT",start:2,size:4}},border:!1};class A extends a{constructor(t){if(super(t),this.bytes=6,this.polygonLookup=null,this.settings={...A.defaults,...t},!t.data)throw new Error('no "data" array setting defined');if(!t.map)throw new Error('no leaflet "map" object setting defined');this.setup().render()}get border(){if("boolean"!=typeof this.settings.border)throw new Error("settings.boarder not defined");return this.settings.border}render(){this.resetVertices();const{canvas:t,gl:n,layer:r,vertices:e,mapMatrix:i}=this,o=this.getBuffer("vertex"),u=new Float32Array(e),a=u.BYTES_PER_ELEMENT,s=this.getAttributeLocation("vertex");return n.bindBuffer(n.ARRAY_BUFFER,o),n.bufferData(n.ARRAY_BUFFER,u,n.STATIC_DRAW),n.vertexAttribPointer(s,2,n.FLOAT,!1,a*this.bytes,0),n.enableVertexAttribArray(s),this.matrix=this.getUniformLocation("matrix"),n.viewport(0,0,t.width,t.height),i.setSize(t.width,t.height),n.uniformMatrix4fv(this.matrix,!1,i.array),this.attachShaderVariables(a),r.redraw(),this}resetVertices(){var t,n;this.vertices=[],this.vertexLines=[],this.polygonLookup=new w.a;const{vertices:r,vertexLines:i,polygonLookup:o,settings:u,map:a,border:s,opacity:c,color:l}=this,h=u.data;let v,p,d,g,y,_,x,S,A,L,E=null,k=0;switch(h.type){case"Feature":o.loadFeatureCollection({type:"FeatureCollection",features:[h]}),d=b(h);break;case"MultiPolygon":{const t={type:"MultiPolygon",coordinates:h.coordinates};o.loadFeatureCollection({type:"FeatureCollection",features:[{type:"Feature",properties:{id:"bar"},geometry:t}]}),d=b(h);break}default:o.loadFeatureCollection(h),d=h.features}const M=d.length;if(!l)throw new Error("color is not properly defined");for("function"==typeof l&&(E=l);k<M;k++){g=d[k],x=[],y=null!==E?E(k,g):l,_=(g.geometry||g).coordinates,A=m.a.flatten(_),S=m()(A.vertices,A.holes,A.dimensions),L=_[0][0].length;const{longitudeKey:o,latitudeKey:u}=this;for(let t=0,n=S.length;t<n;t++){if(p=S[t],"number"!=typeof A.vertices[0])throw new Error("unhandled polygon");x.push(A.vertices[p*L+o],A.vertices[p*L+u])}for(let n=0,i=x.length;n<i;n)v=a.project(new e.LatLng(x[n++],x[n++]),0),r.push(v.x,v.y,y.r,y.g,y.b,null!==(t=y.a)&&void 0!==t?t:c);if(s){const t=[];for(let n=1,r=A.vertices.length;n<r;n+=2)t.push(A.vertices[n],A.vertices[n-1]),t.push(A.vertices[n+2],A.vertices[n+1]);for(let r=0,e=t.length;r<e;r)v=f(t[r++],t[r++]),i.push(v.x,v.y,y.r,y.g,y.b,null!==(n=y.a)&&void 0!==n?n:c)}}return this}drawOnCanvas(t){if(!this.gl)return this;const{scale:n,offset:r,canvas:e}=t,{mapMatrix:i,gl:o,vertices:u,settings:a,vertexLines:s,border:c}=this;if(i.setSize(e.width,e.height).scaleTo(n).translateTo(-r.x,-r.y),o.clear(o.COLOR_BUFFER_BIT),o.viewport(0,0,e.width,e.height),o.uniformMatrix4fv(this.matrix,!1,i.array),c){const t=this.getBuffer("vertexLines"),n=new Float32Array(s),r=n.BYTES_PER_ELEMENT,i=this.getAttributeLocation("vertex");o.bindBuffer(o.ARRAY_BUFFER,null),o.bindBuffer(o.ARRAY_BUFFER,t),o.bufferData(o.ARRAY_BUFFER,n,o.STATIC_DRAW),null!==this.settings.shaderVariables&&this.attachShaderVariables(r),o.vertexAttribPointer(i,3,o.FLOAT,!1,r*this.bytes,0),o.enableVertexAttribArray(i),o.enable(o.DEPTH_TEST),o.viewport(0,0,e.width,e.height),o.drawArrays(o.LINES,0,s.length/this.bytes);const c=this.getBuffer("vertex"),f=new Float32Array(u);o.bindBuffer(o.ARRAY_BUFFER,null),o.bindBuffer(o.ARRAY_BUFFER,c),o.bufferData(o.ARRAY_BUFFER,f,o.STATIC_DRAW),null!==a.shaderVariables&&this.attachShaderVariables(r),o.vertexAttribPointer(i,2,o.FLOAT,!1,r*this.bytes,0),o.enableVertexAttribArray(i),o.enable(o.DEPTH_TEST),o.viewport(0,0,e.width,e.height)}return o.drawArrays(o.TRIANGLES,0,u.length/this.bytes),this}static tryClick(t,n,r){let e=null,i=null;if(r.forEach((function(r){if(!r.active)return;if(r.map!==n)return;if(!r.polygonLookup)return;const o=r.polygonLookup.search(t.latlng.lng,t.latlng.lat);o&&(i=r,e=o)})),i&&e){const n=i.click(t,e);return void 0!==n?n:void 0}}static tryHover(t,n,r){const e=[];let i;return r.forEach(r=>{if(r.active&&r.map===n&&r.polygonLookup&&(i=r.polygonLookup.search(t.latlng.lng,t.latlng.lat),i)){const n=r.hover(t,i);void 0!==n&&e.push(n)}}),e}}A.defaults=S;const L={vertex:"uniform mat4 matrix;\nattribute vec4 vertex;\nattribute vec4 color;\nattribute float pointSize;\nvarying vec4 _color;\n\nvoid main() {\n  //set the size of the point\n  gl_PointSize = pointSize;\n\n  //multiply each vertex by a matrix.\n  gl_Position = matrix * vertex;\n\n  //pass the color to the fragment shader\n  _color = color;\n}\n",fragment:{dot:"precision mediump float;\nuniform vec4 color;\n\nvoid main() {\n    float border = 0.05;\n    float radius = 0.5;\n    vec2 center = vec2(0.5);\n\n    vec4 color0 = vec4(0.0);\n    vec4 color1 = vec4(color[0], color[1], color[2], color[3]);\n\n    vec2 m = gl_PointCoord.xy - center;\n    float dist = radius - sqrt(m.x * m.x + m.y * m.y);\n\n    float t = 0.0;\n    if (dist > border) {\n        t = 1.0;\n    } else if (dist > 0.0) {\n        t = dist / border;\n    }\n\n    //works for overlapping circles if blending is enabled\n    gl_FragColor = mix(color0, color1, t);\n}\n",point:"precision mediump float;\nvarying vec4 _color;\n\nvoid main() {\n  float border = 0.1;\n  float radius = 0.5;\n  vec2 center = vec2(0.5, 0.5);\n\n  vec4 pointColor = vec4(\n    _color[0],\n    _color[1],\n    _color[2],\n    _color[3]\n  );\n\n  vec2 m = gl_PointCoord.xy - center;\n  float dist1 = radius - sqrt(m.x * m.x + m.y * m.y);\n\n  float t1 = 0.0;\n  if (dist1 > border) {\n      t1 = 1.0;\n  } else if (dist1 > 0.0) {\n      t1 = dist1 / border;\n  }\n\n  //works for overlapping circles if blending is enabled\n  //gl_FragColor = mix(color0, color1, t);\n\n  //border\n  float outerBorder = 0.05;\n  float innerBorder = 0.8;\n  vec4 borderColor = vec4(0, 0, 0, 0.4);\n  vec2 uv = gl_PointCoord.xy;\n  vec4 clearColor = vec4(0, 0, 0, 0);\n\n  // Offset uv with the center of the circle.\n  uv -= center;\n\n  float dist2 =  sqrt(dot(uv, uv));\n\n  float t2 = 1.0 + smoothstep(radius, radius + outerBorder, dist2)\n                - smoothstep(radius - innerBorder, radius, dist2);\n\n  gl_FragColor = mix(mix(borderColor, clearColor, t2), pointColor, t1);\n}\n",puck:"precision mediump float;\nvarying vec4 _color;\n\nvoid main() {\n  vec2 center = vec2(0.5);\n  vec2 uv = gl_PointCoord.xy - center;\n  float smoothing = 0.005;\n  vec4 _color1 = vec4(_color[0], _color[1], _color[2], _color[3]);\n  float radius1 = 0.3;\n  vec4 _color2 = vec4(_color[0], _color[1], _color[2], _color[3]);\n  float radius2 = 0.5;\n  float dist = length(uv);\n\n  //SMOOTH\n  float gamma = 2.2;\n  color1.rgb = pow(_color1.rgb, vec3(gamma));\n  color2.rgb = pow(_color2.rgb, vec3(gamma));\n\n  vec4 puck = mix(\n    mix(\n      _color1,\n      _color2,\n      smoothstep(\n        radius1 - smoothing,\n        radius1 + smoothing,\n        dist\n      )\n    ),\n    vec4(0,0,0,0),\n      smoothstep(\n        radius2 - smoothing,\n        radius2 + smoothing,\n        dist\n    )\n  );\n\n  //Gamma correction (prevents color fringes)\n  puck.rgb = pow(puck.rgb, vec3(1.0 / gamma));\n  gl_FragColor = puck;\n}\n",simpleCircle:"precision mediump float;\nvarying vec4 _color;\n\nvoid main() {\n    vec4 color1 = vec4(_color[0], _color[1], _color[2], _color[3]);\n\n    //simple circles\n    float d = distance (gl_PointCoord, vec2(0.5, 0.5));\n    if (d < 0.5 ){\n        gl_FragColor = color1;\n    } else {\n        discard;\n    }\n}\n",square:"precision mediump float;\nvarying vec4 _color;\n\nvoid main() {\n    //squares\n    gl_FragColor = vec4(_color[0], _color[1], _color[2], _color[3]);\n}\n",polygon:"precision mediump float;\nvarying vec4 _color;\n\nvoid main() {\n  gl_FragColor = vec4(\n    _color[0],\n    _color[1],\n    _color[2],\n    _color[3]\n  );\n}\n"}};class E{constructor(){this.longitudeKey=1,this.latitudeKey=0,this.clickSetupMaps=[],this.hoverSetupMaps=[],this.shader=L,this.Points=y,this.Shapes=A,this.Lines=d,this.pointsInstances=[],this.shapesInstances=[],this.linesInstances=[]}longitudeFirst(){return this.longitudeKey=0,this.latitudeKey=1,this}latitudeFirst(){return this.latitudeKey=0,this.longitudeKey=1,this}get instances(){return[...this.pointsInstances,...this.linesInstances,...this.shapesInstances]}points(t){const n=new this.Points({setupClick:this.setupClick.bind(this),setupHover:this.setupHover.bind(this),latitudeKey:k.latitudeKey,longitudeKey:k.longitudeKey,vertexShaderSource:()=>this.shader.vertex,fragmentShaderSource:()=>this.shader.fragment.point,...t});return this.pointsInstances.push(n),n}lines(t){const n=new this.Lines({setupClick:this.setupClick.bind(this),setupHover:this.setupHover.bind(this),latitudeKey:this.latitudeKey,longitudeKey:this.longitudeKey,vertexShaderSource:()=>this.shader.vertex,fragmentShaderSource:()=>this.shader.fragment.polygon,...t});return this.linesInstances.push(n),n}shapes(t){const n=new this.Shapes({setupClick:this.setupClick.bind(this),setupHover:this.setupHover.bind(this),latitudeKey:this.latitudeKey,longitudeKey:this.longitudeKey,vertexShaderSource:()=>this.shader.vertex,fragmentShaderSource:()=>this.shader.fragment.polygon,...t});return this.shapesInstances.push(n),n}setupClick(t){this.clickSetupMaps.includes(t)||(this.clickSetupMaps.push(t),t.on("click",n=>{let r;return r=this.Points.tryClick(n,t,this.pointsInstances),void 0!==r?r:(r=this.Lines.tryClick(n,t,this.linesInstances),void 0!==r?r:(r=this.Shapes.tryClick(n,t,this.shapesInstances),void 0!==r?r:void 0))}))}setupHover(t,n,r){this.hoverSetupMaps.includes(t)||(this.hoverSetupMaps.push(t),t.on("mousemove",function(t,n,r){let e=null;return function(i){const o=r&&!e;null!==e&&clearTimeout(e),e=setTimeout((function(){e=null,r||t(i)}),n),o&&t(i)}}(n=>{this.Points.tryHover(n,t,this.pointsInstances),this.Lines.tryHover(n,t,this.linesInstances),this.Shapes.tryHover(n,t,this.shapesInstances)},null!=n?n:0,r)))}}const k=new E;n.default=k;"undefined"!=typeof window&&window.L&&(window.L.glify=k,window.L.Glify=E)}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,